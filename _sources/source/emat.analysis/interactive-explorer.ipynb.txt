{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import emat\n",
    "emat.versions()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Interactive Explorer\n",
    "\n",
    "TMIP-EMAT includes an interactive explorer, inspired by a \n",
    "[similar tool](https://htmlpreview.github.io/?https://github.com/VisionEval/VisionEval/blob/master/sources/VEScenarioViewer/verpat.html) \n",
    "provided with the [VisionEval](https://visioneval.org) package.\n",
    "To demonstrate the interactive explorer, we will use the Road Test example model.\n",
    "First, we need to develop and run a design of experiments to have some\n",
    "data to explore.  We'll run 5,000 experiments to get a good size sample of \n",
    "data points to visualize."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import emat.examples\n",
    "scope, db, model = emat.examples.road_test()\n",
    "design = model.design_experiments(n_samples=5000)\n",
    "results = model.run_experiments(design)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The interactive explorer class can be imported from the `emat.analysis` package.\n",
    "To use it, we create an `Explore` instance, giving a scope and a set of \n",
    "experimental results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.analysis import Explore\n",
    "xp = Explore(scope=scope, data=results)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<span style=\"color:red; font-size:80%;\">\n",
    "Note: The interactivity of the figures displayed directly on the\n",
    "TMIP-EMAT website is not enabled.  This interactivity requires\n",
    "a live running Python kernel to support the calculations to\n",
    "update the figures.\n",
    "You can try to open a live interactive version in\n",
    "<a href=\"https://mybinder.org/v2/gh/tmip-emat/tmip-emat/ab5ea96371751d7d3ddd95dd5599b384d781f92e?filepath=docs%2Fsource%2Femat.analysis%2Finteractive-explorer.ipynb\">Binder</a>\n",
    "but it may take a bit of time to load.</span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Single Dimension Figures\n",
    "\n",
    "To build a complete interactive workspace similar to that provided by VisionEval, we\n",
    "can use the `complete` method of the `Explore` instance we created above. This will\n",
    "create a set of histograms illustrating the data in the results computed above. There\n",
    "is one histogram for each policy lever, exogenous uncertainty, and performance measure.\n",
    "\n",
    "Each histogram is accompanied by a range slider or toggle buttons, depending on the \n",
    "data type (boolean and categorical data get toggle buttons).  These controls can \n",
    "be used interactively to select and highlight only a subset of the experiments in\n",
    "the complete data set.  By manipulating these controls, users can explore the \n",
    "interaction across various inputs and outputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "xp.complete()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In addition to manipulating the controls interactively, they can also be\n",
    "set programatically from Python code.  For example, to clear the selections,\n",
    "use the `clear` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "xp.clear()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To set the lower or upper bound on a range slider, use `set_lower_bound` or `set_upper_bound`, \n",
    "each of which takes the name of the scope parmeter or measure to set, and the bound."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "xp.set_lower_bound('net_benefits', 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To set toggle buttons, use `remove_from_allowed_set` or `add_to_allowed_set`, again giving as \n",
    "arguments the name of the scope parmeter or measure, and the value to remove or add."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "xp.remove_from_allowed_set('debt_type', 'Rev Bond')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In addition to the histogram views, TMIP-EMAT can also generate kernel density plots,\n",
    "by specifying the `style` keyword argument as `'kde'` when using the `viewers` or \n",
    "`selectors` methods.\n",
    "These plots differ from the histograms in two ways: the discrete bars are replaced\n",
    "by smoothed curves, and the selected (orange) area is renormalized to the same scale \n",
    "as the overall (blue) curves, similar to a probability density function (although the\n",
    "figures generated are not actually PDF's, as they incorporate a selection of experiments\n",
    "that vary based on policy levers, which are not probabilistic distributions)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "xp.viewers(['time_savings', 'net_benefits'], style='kde')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "xp.viewers(['input_flow', 'net_benefits', 'value_of_time'], style='kde')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Two Dimension Figures"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `Explore` object can also create an interactive two-dimensional scatter plot,\n",
    "using the `two_way` method. This method allows the user to specify the variables\n",
    "for both the `x` and `y` axis, and either can be any policy lever, exogenous \n",
    "uncertainty, or performance measure.  These dimensions can be changed interactively\n",
    "later as well.  The resulting scatter plot is linked to the same selection of\n",
    "experiments in the interactive one-dimensional figures shown above, and by default\n",
    "the same experiments are highlighted in blue and orange in all of these related\n",
    "figures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "xp.two_way(x='expand_capacity', y='time_savings')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using PRIM with the Interactive Explorer\n",
    "\n",
    "The PRIM tools are available directly within the interactive explorer. Simply \n",
    "set a target as shown."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prim = xp.prim(target=xp.data['net_benefits'] > 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The tradeoff selector is directly integrated into the explorer.  In addition\n",
    "to the information visible by hovering over any point in the tradeoff selector\n",
    "figure, clicking on that point will set all of the interactive constraints \n",
    "to the bounds given by that particular point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prim.tradeoff_selector()"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  },
  "pycharm": {
   "stem_cell": {
    "cell_type": "raw",
    "metadata": {
     "collapsed": false
    },
    "source": []
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
