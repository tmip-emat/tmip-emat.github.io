{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TMIP-EMAT Running Core Model Experiments on Multiple Computers\n",
    "\n",
    "Experiments designed for sensitivity testing and meta-model development are run using the core model (as opposed to a meta-model). These experiments are completely independent and thus can be run in parallel if multiple computers are available. In this situation, an initial process is needed to create the TMIP-EMAT database, populate it with the scope, and design the experiments. At this point, jupyter notebooks on separate computers can connect to the same database to access experiment designs and to import metrics from the core model run.\n",
    "\n",
    "The notebook cells below demonstrate the initial configuration that is only run **once**, that involves: \n",
    "1. Creating a TMIP-EMAT database\n",
    "2. Storing the scope in the database\n",
    "3. Designing a set of experiments\n",
    "\n",
    "The following section demonstrates the execution steps that are run **on each modeling computer**, these involve:\n",
    "\n",
    "1. **Connecting** to the TMIP-EMAT database\n",
    "2. **Reading** the scope from the database\n",
    "3. Running a subset of the experiments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.1.4'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import emat\n",
    "emat.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas, numpy, os\n",
    "from emat.util.loggers import log_to_stderr\n",
    "log = log_to_stderr(level=20)\n",
    "scope = emat.Scope('GBNRTC_scope.yaml') # scope file is local to the Master"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create SQLite DB file and record scope\n",
    "\n",
    "The database file needs to be stored in a location accessible by all modeling systems"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "db = emat.SQLiteDB(\"emat_db/gbnrtc_multi.db\",initialize=True)\n",
    "scope = emat.Scope(\"gbnrtc_scope.yaml\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.model import GBNRTCModel\n",
    "g = GBNRTCModel(\n",
    "    configuration='gbnrtc_model_config.yaml',\n",
    "    scope=scope,\n",
    "    db=db,\n",
    ")\n",
    "g"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Design experiments\n",
    "\n",
    "Only done by Master notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "design = g.design_experiments(scope=scope,\n",
    "                              n_samples_per_factor=10, \n",
    "                              sampler='lhs',\n",
    "                              design_name='test_lhs')\n",
    "design.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Run subset of experiments on each computer\n",
    "\n",
    "Results will be stored in the database associated with the model\n",
    "\n",
    "***The following cells are to be run in an independent notebook***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import emat\n",
    "emat.__version__\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas, numpy, os\n",
    "from emat.util.loggers import log_to_stderr\n",
    "log = log_to_stderr(level=20)\n",
    "#scope = emat.Scope('GBNRTC_scope.yaml') # Scope will be read from the database"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Connect to existing SQLite DB file and read scope\n",
    "\n",
    "File created by Master notebook (step 1.1 must be complete by the Master notebook)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "db = emat.SQLiteDB(\"emat_db/gbnrtc.db\",initialize=False)\n",
    "scope = db.read_scope('GBNRTC')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.model import GBNRTCModel\n",
    "g = GBNRTCModel(\n",
    "    configuration='gbnrtc_model_config.yaml',\n",
    "    scope=scope,\n",
    "    db=db,\n",
    ")\n",
    "g"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Run subset of experiments\n",
    "\n",
    "Run set of experiments (1-35)\n",
    "\n",
    "Results will be stored in the database associated with the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "design_subset = g.read_experiments(design_name='gbnrtc_lhs').iloc[0:35]\n",
    "lhs_results = g.run_experiments(design_subset)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
