{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. py:currentmodule:: emat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Road Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.1.1'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import emat\n",
    "emat.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script><script>requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min']},});if(!window._Plotly) {require(['plotly'],function(plotly) {window._Plotly=plotly;});}</script>"
      ],
      "text/vnd.plotly.v1+html": [
       "<script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script><script>requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min']},});if(!window._Plotly) {require(['plotly'],function(plotly) {window._Plotly=plotly;});}</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import ema_workbench\n",
    "import os, numpy, pandas, functools\n",
    "from emat.util.xmle import Show\n",
    "from emat.viz.scatter import scatter_graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger = emat.util.loggers.log_to_stderr(20, True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the Exploratory Scope"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The model scope is defined in a YAML file.  For this Road Test example, the scope file is named \n",
    ":ref:`road_test.yaml <road_test_scope_file>` and is included in the model/tests directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "road_test_scope_file = emat.package_file('model','tests','road_test.yaml')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The filename for the YAML file is the first argument when creating a :class:`Scope`\n",
    "object, which will load and process the content of the file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<emat.Scope with 2 constants, 7 uncertainties, 4 levers, 7 measures>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "road_scope = emat.Scope(road_test_scope_file)\n",
    "road_scope"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A short summary of the scope can be reviewed using the `info` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name: EMAT Road Test\n",
      "desc: prototype run\n",
      "constants:\n",
      "  free_flow_time = 60\n",
      "  initial_capacity = 100\n",
      "uncertainties:\n",
      "  alpha = 0.1 to 0.2\n",
      "  beta = 3.5 to 5.5\n",
      "  input_flow = 80 to 150\n",
      "  value_of_time = 0.001 to 0.08\n",
      "  unit_cost_expansion = 95 to 145\n",
      "  interest_rate = 0.025 to 0.04\n",
      "  yield_curve = -0.0025 to 0.02\n",
      "levers:\n",
      "  expand_capacity = 0 to 100\n",
      "  amortization_period = 15 to 50\n",
      "  debt_type = categorical\n",
      "  interest_rate_lock = boolean\n",
      "measures:\n",
      "  no_build_travel_time\n",
      "  build_travel_time\n",
      "  time_savings\n",
      "  value_of_time_savings\n",
      "  net_benefits\n",
      "  cost_of_capacity_expansion\n",
      "  present_cost_expansion\n"
     ]
    }
   ],
   "source": [
    "road_scope.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, more detailed information about each part of the scope can be\n",
    "accessed in four list attributes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Parameter('free_flow_time', dtype=real, ptype='constant'),\n",
       " Parameter('initial_capacity', dtype=real, ptype='constant')]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "road_scope.get_constants()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Parameter('alpha', dtype=real, ptype='uncertainty'),\n",
       " Parameter('beta', dtype=real, ptype='uncertainty'),\n",
       " Parameter('input_flow', dtype=int, ptype='uncertainty'),\n",
       " Parameter('value_of_time', dtype=real, ptype='uncertainty'),\n",
       " Parameter('unit_cost_expansion', dtype=real, ptype='uncertainty'),\n",
       " Parameter('interest_rate', dtype=real, ptype='uncertainty'),\n",
       " Parameter('yield_curve', dtype=real, ptype='uncertainty')]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "road_scope.get_uncertainties()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Parameter('expand_capacity', dtype=real, ptype='lever'),\n",
       " Parameter('amortization_period', dtype=int, ptype='lever'),\n",
       " Parameter('debt_type', dtype=cat, ptype='lever'),\n",
       " Parameter('interest_rate_lock', dtype=bool, ptype='lever')]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "road_scope.get_levers()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Measure('no_build_travel_time'),\n",
       " Measure('build_travel_time'),\n",
       " Measure('time_savings'),\n",
       " Measure('value_of_time_savings'),\n",
       " Measure('net_benefits'),\n",
       " Measure('cost_of_capacity_expansion'),\n",
       " Measure('present_cost_expansion')]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "road_scope.get_measures()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using a Database\n",
    "\n",
    "The exploratory modeling process will typically generate many different sets of outputs,\n",
    "for different explored modeling scopes, or for different applications.  It is convenient\n",
    "to organize these outputs in a database structure, so they are stored consistently and \n",
    "readily available for subsequent analysis.\n",
    "\n",
    "The `SQLiteDB` object will create a database to store results.  When instantiated with\n",
    "no arguments, the database is initialized in-memory, which will not store anything to\n",
    "disk (which is convenient for this example, but in practice you will generally want to\n",
    "store data to disk so that it can persist after this Python session ends)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[00:04.99] MainProcess/INFO: running script scope.sql\n",
      "[00:05.00] MainProcess/INFO: running script exp_design.sql\n",
      "[00:05.00] MainProcess/INFO: running script meta_model.sql\n"
     ]
    }
   ],
   "source": [
    "emat_db = emat.SQLiteDB()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An EMAT Scope can be stored in the database, to provide needed information about what the \n",
    "various inputs and outputs represent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "road_scope.store_scope(emat_db)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Trying to store another scope with the same name (or the same scope) raises a KeyError."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'scope named \"EMAT Road Test\" already exists'\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    road_scope.store_scope(emat_db)\n",
    "except KeyError as err:\n",
    "    print(err)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can review the names of scopes already stored in the database using the `read_scope_names` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['EMAT Road Test']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emat_db.read_scope_names()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Experimental Design\n",
    "\n",
    "Actually running the model can be done by the user on an *ad hoc* basis (i.e., manually defining every \n",
    "combination of inputs that will be evaluated) but the real power of EMAT comes from runnning the model\n",
    "using algorithm-created experimental designs.\n",
    "\n",
    "An important experimental design used in exploratory modeling is the Latin Hypercube.  This design selects\n",
    "a random set of experiments across multiple input dimensions, to ensure \"good\" coverage of the \n",
    "multi-dimensional modeling space.\n",
    "\n",
    "The `design_latin_hypercube` function creates such a design based on a `Scope`, and optionally\n",
    "stores the design of experiments in a database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.experiment.experimental_design import design_experiments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>beta</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>free_flow_time</th>\n",
       "      <th>initial_capacity</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.184682</td>\n",
       "      <td>38</td>\n",
       "      <td>5.237143</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>18.224793</td>\n",
       "      <td>115</td>\n",
       "      <td>0.031645</td>\n",
       "      <td>0</td>\n",
       "      <td>118.213466</td>\n",
       "      <td>0.022518</td>\n",
       "      <td>0.015659</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.166133</td>\n",
       "      <td>36</td>\n",
       "      <td>4.121963</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>87.525790</td>\n",
       "      <td>129</td>\n",
       "      <td>0.037612</td>\n",
       "      <td>1</td>\n",
       "      <td>141.322696</td>\n",
       "      <td>0.052306</td>\n",
       "      <td>0.007307</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.198937</td>\n",
       "      <td>44</td>\n",
       "      <td>4.719838</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>45.698048</td>\n",
       "      <td>105</td>\n",
       "      <td>0.028445</td>\n",
       "      <td>0</td>\n",
       "      <td>97.783320</td>\n",
       "      <td>0.011923</td>\n",
       "      <td>-0.001545</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.158758</td>\n",
       "      <td>42</td>\n",
       "      <td>4.915816</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>51.297546</td>\n",
       "      <td>113</td>\n",
       "      <td>0.036234</td>\n",
       "      <td>1</td>\n",
       "      <td>127.224901</td>\n",
       "      <td>0.077527</td>\n",
       "      <td>0.004342</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.157671</td>\n",
       "      <td>42</td>\n",
       "      <td>3.845952</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>22.824149</td>\n",
       "      <td>133</td>\n",
       "      <td>0.039257</td>\n",
       "      <td>0</td>\n",
       "      <td>107.820482</td>\n",
       "      <td>0.027270</td>\n",
       "      <td>0.001558</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               alpha  amortization_period      beta debt_type  \\\n",
       "experiment                                                      \n",
       "1           0.184682                   38  5.237143  Rev Bond   \n",
       "2           0.166133                   36  4.121963     Paygo   \n",
       "3           0.198937                   44  4.719838   GO Bond   \n",
       "4           0.158758                   42  4.915816   GO Bond   \n",
       "5           0.157671                   42  3.845952     Paygo   \n",
       "\n",
       "            expand_capacity  input_flow  interest_rate  interest_rate_lock  \\\n",
       "experiment                                                                   \n",
       "1                 18.224793         115       0.031645                   0   \n",
       "2                 87.525790         129       0.037612                   1   \n",
       "3                 45.698048         105       0.028445                   0   \n",
       "4                 51.297546         113       0.036234                   1   \n",
       "5                 22.824149         133       0.039257                   0   \n",
       "\n",
       "            unit_cost_expansion  value_of_time  yield_curve  free_flow_time  \\\n",
       "experiment                                                                    \n",
       "1                    118.213466       0.022518     0.015659              60   \n",
       "2                    141.322696       0.052306     0.007307              60   \n",
       "3                     97.783320       0.011923    -0.001545              60   \n",
       "4                    127.224901       0.077527     0.004342              60   \n",
       "5                    107.820482       0.027270     0.001558              60   \n",
       "\n",
       "            initial_capacity  \n",
       "experiment                    \n",
       "1                        100  \n",
       "2                        100  \n",
       "3                        100  \n",
       "4                        100  \n",
       "5                        100  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "design = design_experiments(road_scope, db=emat_db, n_samples_per_factor=10, sampler='lhs')\n",
    "design.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>beta</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>free_flow_time</th>\n",
       "      <th>initial_capacity</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>0.154130</td>\n",
       "      <td>21</td>\n",
       "      <td>5.061648</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>75.542217</td>\n",
       "      <td>112</td>\n",
       "      <td>0.029885</td>\n",
       "      <td>1</td>\n",
       "      <td>124.452736</td>\n",
       "      <td>0.020584</td>\n",
       "      <td>0.001425</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>0.148731</td>\n",
       "      <td>29</td>\n",
       "      <td>4.088663</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>91.184595</td>\n",
       "      <td>145</td>\n",
       "      <td>0.028659</td>\n",
       "      <td>0</td>\n",
       "      <td>131.688623</td>\n",
       "      <td>0.017927</td>\n",
       "      <td>0.007850</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>0.124027</td>\n",
       "      <td>34</td>\n",
       "      <td>3.956884</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>60.436585</td>\n",
       "      <td>80</td>\n",
       "      <td>0.038101</td>\n",
       "      <td>0</td>\n",
       "      <td>95.462532</td>\n",
       "      <td>0.014444</td>\n",
       "      <td>0.011101</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>0.129724</td>\n",
       "      <td>41</td>\n",
       "      <td>4.969628</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>74.271040</td>\n",
       "      <td>139</td>\n",
       "      <td>0.029665</td>\n",
       "      <td>0</td>\n",
       "      <td>98.206495</td>\n",
       "      <td>0.013711</td>\n",
       "      <td>0.010072</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>0.185723</td>\n",
       "      <td>22</td>\n",
       "      <td>4.485432</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>61.084166</td>\n",
       "      <td>95</td>\n",
       "      <td>0.039195</td>\n",
       "      <td>0</td>\n",
       "      <td>140.792308</td>\n",
       "      <td>0.068903</td>\n",
       "      <td>0.019277</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               alpha  amortization_period      beta debt_type  \\\n",
       "experiment                                                      \n",
       "111         0.154130                   21  5.061648  Rev Bond   \n",
       "112         0.148731                   29  4.088663  Rev Bond   \n",
       "113         0.124027                   34  3.956884     Paygo   \n",
       "114         0.129724                   41  4.969628     Paygo   \n",
       "115         0.185723                   22  4.485432     Paygo   \n",
       "\n",
       "            expand_capacity  input_flow  interest_rate  interest_rate_lock  \\\n",
       "experiment                                                                   \n",
       "111               75.542217         112       0.029885                   1   \n",
       "112               91.184595         145       0.028659                   0   \n",
       "113               60.436585          80       0.038101                   0   \n",
       "114               74.271040         139       0.029665                   0   \n",
       "115               61.084166          95       0.039195                   0   \n",
       "\n",
       "            unit_cost_expansion  value_of_time  yield_curve  free_flow_time  \\\n",
       "experiment                                                                    \n",
       "111                  124.452736       0.020584     0.001425              60   \n",
       "112                  131.688623       0.017927     0.007850              60   \n",
       "113                   95.462532       0.014444     0.011101              60   \n",
       "114                   98.206495       0.013711     0.010072              60   \n",
       "115                  140.792308       0.068903     0.019277              60   \n",
       "\n",
       "            initial_capacity  \n",
       "experiment                    \n",
       "111                      100  \n",
       "112                      100  \n",
       "113                      100  \n",
       "114                      100  \n",
       "115                      100  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "large_design = design_experiments(road_scope, db=emat_db, n_samples=5000, sampler='lhs', design_name='lhs_large')\n",
    "large_design.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can review what experimental designs have already been stored in the database using the \n",
    "`read_design_names` method of the `Database` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['lhs', 'lhs_large']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emat_db.read_design_names('EMAT Road Test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Core Model in Python"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Up until this point, we have been considering a model in the abstract, defining in the :class:`Scope` what the inputs \n",
    "and outputs will be, and designing some experiments we would like to run with the model.  Now we will actually \n",
    "interface with the model itself. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Definition\n",
    "\n",
    "In the simplest approach for EMAT, a model can be defined as a basic Python function, which accepts all\n",
    "inputs (exogenous uncertainties, policy levers, and externally defined constants) as named keyword\n",
    "arguments, and returns a dictionary where the dictionary keys are names of performace measures, and \n",
    "the mapped values are the computed values for those performance measures.  The `Road_Capacity_Investment`\n",
    "function provided in EMAT is an example of such a function.  This made-up example considers the \n",
    "investment in capacity expansion for a single roadway link.  The inputs to this function are described\n",
    "above in the Scope, including uncertain parameters in the volume-delay function,\n",
    "traffic volumes, value of travel time savings, unit construction costs, and interest rates, and policy levers including the \n",
    "amount of capacity expansion and amortization period."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.model.core_python import PythonCoreModel\n",
    "from emat.model.core_python import Road_Capacity_Investment"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The :class:`PythonCoreModel <emat.model.core_python.core_python_api.PythonCoreModel>` object \n",
    "provides an interface that links the basic Python function that represents \n",
    "the model, the :class:`Scope <emat.scope.scope.Scope>`, and optionally the \n",
    ":class:`Database <emat.database.database.Database>` used to manage data storage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.model.core_python import PythonCoreModel\n",
    "m = PythonCoreModel(Road_Capacity_Investment, scope=road_scope, db=emat_db)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "From the :class:`PythonCoreModel`, which links the model, scope, design, and database, we can run the design of experiments.  \n",
    "This will systematically run the core model with each set of input parameters in the design, store the results in\n",
    "the database, and return a pandas.DataFrame containing the results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Execution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ema_workbench import SequentialEvaluator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[00:06.62] MainProcess/INFO: performing 110 scenarios/policies * 1 model(s) = 110 experiments\n",
      "[00:06.63] MainProcess/INFO: performing experiments sequentially\n",
      "[00:06.64] MainProcess/INFO: 11 cases completed\n",
      "[00:06.64] MainProcess/INFO: 22 cases completed\n",
      "[00:06.65] MainProcess/INFO: 33 cases completed\n",
      "[00:06.65] MainProcess/INFO: 44 cases completed\n",
      "[00:06.65] MainProcess/INFO: 55 cases completed\n",
      "[00:06.66] MainProcess/INFO: 66 cases completed\n",
      "[00:06.66] MainProcess/INFO: 77 cases completed\n",
      "[00:06.66] MainProcess/INFO: 88 cases completed\n",
      "[00:06.67] MainProcess/INFO: 99 cases completed\n",
      "[00:06.67] MainProcess/INFO: 110 cases completed\n",
      "[00:06.67] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "      <th>no_build_travel_time</th>\n",
       "      <th>build_travel_time</th>\n",
       "      <th>time_savings</th>\n",
       "      <th>value_of_time_savings</th>\n",
       "      <th>net_benefits</th>\n",
       "      <th>cost_of_capacity_expansion</th>\n",
       "      <th>present_cost_expansion</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.184682</td>\n",
       "      <td>5.237143</td>\n",
       "      <td>115</td>\n",
       "      <td>0.022518</td>\n",
       "      <td>118.213466</td>\n",
       "      <td>0.031645</td>\n",
       "      <td>0.015659</td>\n",
       "      <td>18.224793</td>\n",
       "      <td>38</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>83.038716</td>\n",
       "      <td>69.586789</td>\n",
       "      <td>13.451927</td>\n",
       "      <td>34.835362</td>\n",
       "      <td>-79.515515</td>\n",
       "      <td>114.350877</td>\n",
       "      <td>2154.415985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.166133</td>\n",
       "      <td>4.121963</td>\n",
       "      <td>129</td>\n",
       "      <td>0.052306</td>\n",
       "      <td>141.322696</td>\n",
       "      <td>0.037612</td>\n",
       "      <td>0.007307</td>\n",
       "      <td>87.525790</td>\n",
       "      <td>36</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>True</td>\n",
       "      <td>88.474313</td>\n",
       "      <td>62.132583</td>\n",
       "      <td>26.341730</td>\n",
       "      <td>177.741192</td>\n",
       "      <td>-205.321480</td>\n",
       "      <td>383.062672</td>\n",
       "      <td>12369.380535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.198937</td>\n",
       "      <td>4.719838</td>\n",
       "      <td>105</td>\n",
       "      <td>0.011923</td>\n",
       "      <td>97.783320</td>\n",
       "      <td>0.028445</td>\n",
       "      <td>-0.001545</td>\n",
       "      <td>45.698048</td>\n",
       "      <td>44</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>75.027180</td>\n",
       "      <td>62.543328</td>\n",
       "      <td>12.483852</td>\n",
       "      <td>15.629037</td>\n",
       "      <td>-151.944318</td>\n",
       "      <td>167.573355</td>\n",
       "      <td>4468.506839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.158758</td>\n",
       "      <td>4.915816</td>\n",
       "      <td>113</td>\n",
       "      <td>0.077527</td>\n",
       "      <td>127.224901</td>\n",
       "      <td>0.036234</td>\n",
       "      <td>0.004342</td>\n",
       "      <td>51.297546</td>\n",
       "      <td>42</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>True</td>\n",
       "      <td>77.370428</td>\n",
       "      <td>62.268768</td>\n",
       "      <td>15.101660</td>\n",
       "      <td>132.298475</td>\n",
       "      <td>-167.624871</td>\n",
       "      <td>299.923347</td>\n",
       "      <td>6526.325171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.157671</td>\n",
       "      <td>3.845952</td>\n",
       "      <td>133</td>\n",
       "      <td>0.027270</td>\n",
       "      <td>107.820482</td>\n",
       "      <td>0.039257</td>\n",
       "      <td>0.001558</td>\n",
       "      <td>22.824149</td>\n",
       "      <td>42</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>False</td>\n",
       "      <td>88.328990</td>\n",
       "      <td>72.848428</td>\n",
       "      <td>15.480561</td>\n",
       "      <td>56.146908</td>\n",
       "      <td>-3.972940</td>\n",
       "      <td>60.119848</td>\n",
       "      <td>2460.910705</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               alpha      beta  input_flow  value_of_time  \\\n",
       "experiment                                                  \n",
       "1           0.184682  5.237143         115       0.022518   \n",
       "2           0.166133  4.121963         129       0.052306   \n",
       "3           0.198937  4.719838         105       0.011923   \n",
       "4           0.158758  4.915816         113       0.077527   \n",
       "5           0.157671  3.845952         133       0.027270   \n",
       "\n",
       "            unit_cost_expansion  interest_rate  yield_curve  expand_capacity  \\\n",
       "experiment                                                                     \n",
       "1                    118.213466       0.031645     0.015659        18.224793   \n",
       "2                    141.322696       0.037612     0.007307        87.525790   \n",
       "3                     97.783320       0.028445    -0.001545        45.698048   \n",
       "4                    127.224901       0.036234     0.004342        51.297546   \n",
       "5                    107.820482       0.039257     0.001558        22.824149   \n",
       "\n",
       "            amortization_period debt_type  interest_rate_lock  \\\n",
       "experiment                                                      \n",
       "1                            38  Rev Bond               False   \n",
       "2                            36     Paygo                True   \n",
       "3                            44   GO Bond               False   \n",
       "4                            42   GO Bond                True   \n",
       "5                            42     Paygo               False   \n",
       "\n",
       "            no_build_travel_time  build_travel_time  time_savings  \\\n",
       "experiment                                                          \n",
       "1                      83.038716          69.586789     13.451927   \n",
       "2                      88.474313          62.132583     26.341730   \n",
       "3                      75.027180          62.543328     12.483852   \n",
       "4                      77.370428          62.268768     15.101660   \n",
       "5                      88.328990          72.848428     15.480561   \n",
       "\n",
       "            value_of_time_savings  net_benefits  cost_of_capacity_expansion  \\\n",
       "experiment                                                                    \n",
       "1                       34.835362    -79.515515                  114.350877   \n",
       "2                      177.741192   -205.321480                  383.062672   \n",
       "3                       15.629037   -151.944318                  167.573355   \n",
       "4                      132.298475   -167.624871                  299.923347   \n",
       "5                       56.146908     -3.972940                   60.119848   \n",
       "\n",
       "            present_cost_expansion  \n",
       "experiment                          \n",
       "1                      2154.415985  \n",
       "2                     12369.380535  \n",
       "3                      4468.506839  \n",
       "4                      6526.325171  \n",
       "5                      2460.910705  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with SequentialEvaluator(m) as eval_seq:\n",
    "    lhs_results = m.run_experiments(design_name='lhs', evaluator=eval_seq)\n",
    "lhs_results.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# with SequentialEvaluator(m) as eval_seq:\n",
    "#     lhs_large_results = m.run_experiments(design_name='lhs_large', evaluator=eval_seq)\n",
    "# lhs_large_results.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once a particular design has been run once, the results can be recovered from the database without re-running the model itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>free_flow_time</th>\n",
       "      <th>initial_capacity</th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "      <th>no_build_travel_time</th>\n",
       "      <th>build_travel_time</th>\n",
       "      <th>time_savings</th>\n",
       "      <th>value_of_time_savings</th>\n",
       "      <th>net_benefits</th>\n",
       "      <th>cost_of_capacity_expansion</th>\n",
       "      <th>present_cost_expansion</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.184682</td>\n",
       "      <td>5.237143</td>\n",
       "      <td>115</td>\n",
       "      <td>0.022518</td>\n",
       "      <td>118.213466</td>\n",
       "      <td>0.031645</td>\n",
       "      <td>0.015659</td>\n",
       "      <td>18.224793</td>\n",
       "      <td>38</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>83.0387</td>\n",
       "      <td>69.5868</td>\n",
       "      <td>13.4519</td>\n",
       "      <td>34.8354</td>\n",
       "      <td>-79.5155</td>\n",
       "      <td>114.351</td>\n",
       "      <td>2154.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.166133</td>\n",
       "      <td>4.121963</td>\n",
       "      <td>129</td>\n",
       "      <td>0.052306</td>\n",
       "      <td>141.322696</td>\n",
       "      <td>0.037612</td>\n",
       "      <td>0.007307</td>\n",
       "      <td>87.525790</td>\n",
       "      <td>36</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>True</td>\n",
       "      <td>88.4743</td>\n",
       "      <td>62.1326</td>\n",
       "      <td>26.3417</td>\n",
       "      <td>177.741</td>\n",
       "      <td>-205.321</td>\n",
       "      <td>383.063</td>\n",
       "      <td>12369.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.198937</td>\n",
       "      <td>4.719838</td>\n",
       "      <td>105</td>\n",
       "      <td>0.011923</td>\n",
       "      <td>97.783320</td>\n",
       "      <td>0.028445</td>\n",
       "      <td>-0.001545</td>\n",
       "      <td>45.698048</td>\n",
       "      <td>44</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>75.0272</td>\n",
       "      <td>62.5433</td>\n",
       "      <td>12.4839</td>\n",
       "      <td>15.629</td>\n",
       "      <td>-151.944</td>\n",
       "      <td>167.573</td>\n",
       "      <td>4468.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.158758</td>\n",
       "      <td>4.915816</td>\n",
       "      <td>113</td>\n",
       "      <td>0.077527</td>\n",
       "      <td>127.224901</td>\n",
       "      <td>0.036234</td>\n",
       "      <td>0.004342</td>\n",
       "      <td>51.297546</td>\n",
       "      <td>42</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>True</td>\n",
       "      <td>77.3704</td>\n",
       "      <td>62.2688</td>\n",
       "      <td>15.1017</td>\n",
       "      <td>132.298</td>\n",
       "      <td>-167.625</td>\n",
       "      <td>299.923</td>\n",
       "      <td>6526.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.157671</td>\n",
       "      <td>3.845952</td>\n",
       "      <td>133</td>\n",
       "      <td>0.027270</td>\n",
       "      <td>107.820482</td>\n",
       "      <td>0.039257</td>\n",
       "      <td>0.001558</td>\n",
       "      <td>22.824149</td>\n",
       "      <td>42</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>False</td>\n",
       "      <td>88.329</td>\n",
       "      <td>72.8484</td>\n",
       "      <td>15.4806</td>\n",
       "      <td>56.1469</td>\n",
       "      <td>-3.97294</td>\n",
       "      <td>60.1198</td>\n",
       "      <td>2460.91</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            free_flow_time  initial_capacity     alpha      beta  input_flow  \\\n",
       "experiment                                                                     \n",
       "1                     60.0             100.0  0.184682  5.237143         115   \n",
       "2                     60.0             100.0  0.166133  4.121963         129   \n",
       "3                     60.0             100.0  0.198937  4.719838         105   \n",
       "4                     60.0             100.0  0.158758  4.915816         113   \n",
       "5                     60.0             100.0  0.157671  3.845952         133   \n",
       "\n",
       "            value_of_time  unit_cost_expansion  interest_rate  yield_curve  \\\n",
       "experiment                                                                   \n",
       "1                0.022518           118.213466       0.031645     0.015659   \n",
       "2                0.052306           141.322696       0.037612     0.007307   \n",
       "3                0.011923            97.783320       0.028445    -0.001545   \n",
       "4                0.077527           127.224901       0.036234     0.004342   \n",
       "5                0.027270           107.820482       0.039257     0.001558   \n",
       "\n",
       "            expand_capacity  amortization_period debt_type  \\\n",
       "experiment                                                   \n",
       "1                 18.224793                   38  Rev Bond   \n",
       "2                 87.525790                   36     Paygo   \n",
       "3                 45.698048                   44   GO Bond   \n",
       "4                 51.297546                   42   GO Bond   \n",
       "5                 22.824149                   42     Paygo   \n",
       "\n",
       "            interest_rate_lock no_build_travel_time build_travel_time  \\\n",
       "experiment                                                              \n",
       "1                        False              83.0387           69.5868   \n",
       "2                         True              88.4743           62.1326   \n",
       "3                        False              75.0272           62.5433   \n",
       "4                         True              77.3704           62.2688   \n",
       "5                        False               88.329           72.8484   \n",
       "\n",
       "           time_savings value_of_time_savings net_benefits  \\\n",
       "experiment                                                   \n",
       "1               13.4519               34.8354     -79.5155   \n",
       "2               26.3417               177.741     -205.321   \n",
       "3               12.4839                15.629     -151.944   \n",
       "4               15.1017               132.298     -167.625   \n",
       "5               15.4806               56.1469     -3.97294   \n",
       "\n",
       "           cost_of_capacity_expansion present_cost_expansion  \n",
       "experiment                                                    \n",
       "1                             114.351                2154.42  \n",
       "2                             383.063                12369.4  \n",
       "3                             167.573                4468.51  \n",
       "4                             299.923                6526.33  \n",
       "5                             60.1198                2460.91  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reload_results = m.read_experiments(design_name='lhs')\n",
    "reload_results.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is also possible to load only the parameters, or only the performance meausures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>free_flow_time</th>\n",
       "      <th>initial_capacity</th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.184682</td>\n",
       "      <td>5.237143</td>\n",
       "      <td>115</td>\n",
       "      <td>0.022518</td>\n",
       "      <td>118.213466</td>\n",
       "      <td>0.031645</td>\n",
       "      <td>0.015659</td>\n",
       "      <td>18.224793</td>\n",
       "      <td>38</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.166133</td>\n",
       "      <td>4.121963</td>\n",
       "      <td>129</td>\n",
       "      <td>0.052306</td>\n",
       "      <td>141.322696</td>\n",
       "      <td>0.037612</td>\n",
       "      <td>0.007307</td>\n",
       "      <td>87.525790</td>\n",
       "      <td>36</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.198937</td>\n",
       "      <td>4.719838</td>\n",
       "      <td>105</td>\n",
       "      <td>0.011923</td>\n",
       "      <td>97.783320</td>\n",
       "      <td>0.028445</td>\n",
       "      <td>-0.001545</td>\n",
       "      <td>45.698048</td>\n",
       "      <td>44</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.158758</td>\n",
       "      <td>4.915816</td>\n",
       "      <td>113</td>\n",
       "      <td>0.077527</td>\n",
       "      <td>127.224901</td>\n",
       "      <td>0.036234</td>\n",
       "      <td>0.004342</td>\n",
       "      <td>51.297546</td>\n",
       "      <td>42</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>60.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.157671</td>\n",
       "      <td>3.845952</td>\n",
       "      <td>133</td>\n",
       "      <td>0.027270</td>\n",
       "      <td>107.820482</td>\n",
       "      <td>0.039257</td>\n",
       "      <td>0.001558</td>\n",
       "      <td>22.824149</td>\n",
       "      <td>42</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            free_flow_time  initial_capacity     alpha      beta  input_flow  \\\n",
       "experiment                                                                     \n",
       "1                     60.0             100.0  0.184682  5.237143         115   \n",
       "2                     60.0             100.0  0.166133  4.121963         129   \n",
       "3                     60.0             100.0  0.198937  4.719838         105   \n",
       "4                     60.0             100.0  0.158758  4.915816         113   \n",
       "5                     60.0             100.0  0.157671  3.845952         133   \n",
       "\n",
       "            value_of_time  unit_cost_expansion  interest_rate  yield_curve  \\\n",
       "experiment                                                                   \n",
       "1                0.022518           118.213466       0.031645     0.015659   \n",
       "2                0.052306           141.322696       0.037612     0.007307   \n",
       "3                0.011923            97.783320       0.028445    -0.001545   \n",
       "4                0.077527           127.224901       0.036234     0.004342   \n",
       "5                0.027270           107.820482       0.039257     0.001558   \n",
       "\n",
       "            expand_capacity  amortization_period debt_type  interest_rate_lock  \n",
       "experiment                                                                      \n",
       "1                 18.224793                   38  Rev Bond               False  \n",
       "2                 87.525790                   36     Paygo                True  \n",
       "3                 45.698048                   44   GO Bond               False  \n",
       "4                 51.297546                   42   GO Bond                True  \n",
       "5                 22.824149                   42     Paygo               False  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lhs_params = m.read_experiment_parameters(design_name='lhs')\n",
    "lhs_params.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>no_build_travel_time</th>\n",
       "      <th>build_travel_time</th>\n",
       "      <th>time_savings</th>\n",
       "      <th>value_of_time_savings</th>\n",
       "      <th>net_benefits</th>\n",
       "      <th>cost_of_capacity_expansion</th>\n",
       "      <th>present_cost_expansion</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>83.038716</td>\n",
       "      <td>69.586789</td>\n",
       "      <td>13.451927</td>\n",
       "      <td>34.835362</td>\n",
       "      <td>-79.515515</td>\n",
       "      <td>114.350877</td>\n",
       "      <td>2154.415985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>88.474313</td>\n",
       "      <td>62.132583</td>\n",
       "      <td>26.341730</td>\n",
       "      <td>177.741192</td>\n",
       "      <td>-205.321480</td>\n",
       "      <td>383.062672</td>\n",
       "      <td>12369.380535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>75.027180</td>\n",
       "      <td>62.543328</td>\n",
       "      <td>12.483852</td>\n",
       "      <td>15.629037</td>\n",
       "      <td>-151.944318</td>\n",
       "      <td>167.573355</td>\n",
       "      <td>4468.506839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77.370428</td>\n",
       "      <td>62.268768</td>\n",
       "      <td>15.101660</td>\n",
       "      <td>132.298475</td>\n",
       "      <td>-167.624871</td>\n",
       "      <td>299.923347</td>\n",
       "      <td>6526.325171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>88.328990</td>\n",
       "      <td>72.848428</td>\n",
       "      <td>15.480561</td>\n",
       "      <td>56.146908</td>\n",
       "      <td>-3.972940</td>\n",
       "      <td>60.119848</td>\n",
       "      <td>2460.910705</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            no_build_travel_time  build_travel_time  time_savings  \\\n",
       "experiment                                                          \n",
       "1                      83.038716          69.586789     13.451927   \n",
       "2                      88.474313          62.132583     26.341730   \n",
       "3                      75.027180          62.543328     12.483852   \n",
       "4                      77.370428          62.268768     15.101660   \n",
       "5                      88.328990          72.848428     15.480561   \n",
       "\n",
       "            value_of_time_savings  net_benefits  cost_of_capacity_expansion  \\\n",
       "experiment                                                                    \n",
       "1                       34.835362    -79.515515                  114.350877   \n",
       "2                      177.741192   -205.321480                  383.062672   \n",
       "3                       15.629037   -151.944318                  167.573355   \n",
       "4                      132.298475   -167.624871                  299.923347   \n",
       "5                       56.146908     -3.972940                   60.119848   \n",
       "\n",
       "            present_cost_expansion  \n",
       "experiment                          \n",
       "1                      2154.415985  \n",
       "2                     12369.380535  \n",
       "3                      4468.506839  \n",
       "4                      6526.325171  \n",
       "5                      2460.910705  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lhs_outcomes = m.read_experiment_measures(design_name='lhs')\n",
    "lhs_outcomes.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CART\n",
    "\n",
    "Classification and Regression Trees (CART) can also be used for scenario discovery. \n",
    "They partition the explored space (i.e., the scope) into a number of sections, with each partition\n",
    "being added in such a way as to maximize the difference between observations on each \n",
    "side of the newly added partition divider, subject to some constraints."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from ema_workbench.analysis import cart\n",
    "\n",
    "# cart_alg = cart.CART(\n",
    "#     m.read_experiment_parameters(design_name='lhs_large'), \n",
    "#     m.read_experiment_measures(design_name='lhs_large')['net_benefits']>0,\n",
    "# )\n",
    "# cart_alg.build_tree()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Show(cart_alg.show_tree(format='svg')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# cart_alg.boxes_to_dataframe(include_stats=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Constraints"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat import Constraint"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The common use case for constraints in robust optimation is imposing requirements\n",
    "on solution outcomes. For example, we may want to limit our robust search only\n",
    "to solutions where the expected present cost of the capacity expansion is less\n",
    "than some particular value (in our example here, 4000).  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "constraint_1 = Constraint(\n",
    "    \"Maximum build_travel_time\", \n",
    "    outcome_names=\"build_travel_time\",\n",
    "    function=Constraint.must_be_less_than(70),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our second constraint is based exclusively on an input: the capacity expansion\n",
    "must be at least 10.  We could also achieve this kind of constraint by changing\n",
    "the exploratory scope, but we don't necessarily want to change the scope to \n",
    "conduct a single robust optimization analysis with a constraint on a policy lever."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "constraint_2 = Constraint(\n",
    "    \"Minimum Capacity Expansion\", \n",
    "    parameter_names=\"expand_capacity\",\n",
    "    function=Constraint.must_be_greater_than(20),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is also possible to impose constraints based on a combination of inputs and outputs.\n",
    "For example, suppose that the total funds available for pay-as-you-go financing are\n",
    "only 1500.  We may thus want to restrict the robust search to only solutions that\n",
    "are almost certainly within the available funds at 99% confidence (a model output) but only \n",
    "if the Paygo financing option is used (a model input).  This kind of constraint can\n",
    "be created by giving both `parameter_names` and `outcomes_names`, and writing a constraint\n",
    "function that takes two arguments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "constraint_3 = Constraint(\n",
    "    \"Maximum Paygo Present Cost\", \n",
    "    parameter_names='debt_type',\n",
    "    outcome_names='present_cost_expansion',\n",
    "    function=lambda i,j: max(0, j-4000) if i=='Paygo' else 0,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "constraints=[\n",
    "            constraint_1,\n",
    "            constraint_2,\n",
    "            constraint_3,\n",
    "        ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.util.constraints import batch_contraint_check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Maximum build_travel_time</th>\n",
       "      <th>Minimum Capacity Expansion</th>\n",
       "      <th>Maximum Paygo Present Cost</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Maximum build_travel_time  Minimum Capacity Expansion  \\\n",
       "experiment                                                          \n",
       "1                                True                       False   \n",
       "2                                True                        True   \n",
       "3                                True                        True   \n",
       "4                                True                        True   \n",
       "5                               False                        True   \n",
       "\n",
       "            Maximum Paygo Present Cost  \n",
       "experiment                              \n",
       "1                                 True  \n",
       "2                                False  \n",
       "3                                 True  \n",
       "4                                 True  \n",
       "5                                 True  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batch_contraint_check(constraints, lhs_params, lhs_outcomes, False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.scope.box import Bounds, Box, Boxes, find_all_boxes_with_parent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "db = emat_db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "correct error\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    s = Box(scope=road_scope)\n",
    "except TypeError:\n",
    "    print(\"correct error\")\n",
    "else:\n",
    "    raise RuntimeError"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "s = Box(\n",
    "    name=\"Speedy\", \n",
    "    scope=road_scope,\n",
    "    upper_bounds={'build_travel_time':70},\n",
    "    relevant=['net_benefits', 'time_savings'],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "s2 = Box(\n",
    "    name=\"Notable\", \n",
    "    scope=road_scope, \n",
    "    parent=\"Speedy\",\n",
    "    lower_bounds={'expand_capacity': 20},\n",
    "    relevant=road_scope.get_lever_names(),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "s3 = Box(\n",
    "    name=\"No Tax Dollars\",\n",
    "    scope=road_scope, \n",
    "    parent=\"Notable\",\n",
    "    allowed={\n",
    "        'debt_type': {'Paygo', 'Rev Bond'},\n",
    "        'interest_rate_lock': {False},\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "u = Boxes(s,s2,s3, scope=road_scope)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Scope: EMAT Road Test', '▶ Speedy', '▷ ▶ Notable', '▷ ▷ ▶ No Tax Dollars']"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u.fancy_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ChainedBox: No Tax Dollars\n",
       "   ●    build_travel_time <= 70\n",
       "   ●      expand_capacity >= 20\n",
       "   ●            debt_type: {'Rev Bond', 'Paygo'}\n",
       "   ●   interest_rate_lock: {False}\n",
       "   ◌   interest_rate_lock\n",
       "   ◌      expand_capacity\n",
       "   ◌  amortization_period\n",
       "   ◌            debt_type"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u.get_chain(\"No Tax Dollars\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Box: Speedy\n",
      "   ●  build_travel_time <= 70\n",
      "Box: Notable\n",
      "   ●      expand_capacity >= 20\n",
      "   ◌   interest_rate_lock\n",
      "   ◌      expand_capacity\n",
      "   ◌  amortization_period\n",
      "   ◌            debt_type\n",
      "Box: No Tax Dollars\n",
      "   ●           debt_type: {'Rev Bond', 'Paygo'}\n",
      "   ●  interest_rate_lock: {False}\n"
     ]
    }
   ],
   "source": [
    "print(u.get_chain(\"No Tax Dollars\").chain_repr())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "db.write_boxes(u)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "uu = db.read_boxes()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Boxes Universe', '▶ Speedy', '▷ ▶ Notable', '▷ ▷ ▶ No Tax Dollars']"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "uu.fancy_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ChainedBox: No Tax Dollars\n",
       "   ●    build_travel_time <= 70\n",
       "   ●            debt_type: {'Rev Bond', 'Paygo'}\n",
       "   ●   interest_rate_lock: {0}\n",
       "   ◌      expand_capacity\n",
       "   ◌  amortization_period\n",
       "   ◌            debt_type"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "uu.get_chain(\"No Tax Dollars\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<emat.Scope with 2 constants, 7 uncertainties, 4 levers, 7 measures>"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db.read_scope('EMAT Road Test')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.interactive import Explorer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "538949a7c1e64ff5ba4115ef46d21888",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Explorer(children=(VBox(children=(HBox(children=(Output(layout=Layout(flex='1 1 0%', width='auto')), Button(de…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "explore = Explorer('db')\n",
    "explore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "26ef12467ab047228ab0a93b0c9f1843",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output(layout=Layout(border='1px solid red'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from emat.interactive import prototype_logging\n",
    "prototype_logging.handler.out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "prototype_logging.logger.setLevel(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "True in {0}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
