{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. py:currentmodule:: emat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Road Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jpn/anaconda/envs/EMAT/lib/python3.6/importlib/_bootstrap.py:219: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\n",
      "  return f(*args, **kwds)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'0.1.3'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import emat\n",
    "emat.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ema_workbench\n",
    "import os, numpy, pandas, functools\n",
    "from emat.util.xmle import Show\n",
    "from emat.viz.scatter import scatter_graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger = emat.util.loggers.log_to_stderr(20, True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the Exploratory Scope"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The model scope is defined in a YAML file.  For this Road Test example, the scope file is named \n",
    ":ref:`road_test.yaml <road_test_scope_file>` and is included in the model/tests directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "road_test_scope_file = emat.package_file('model','tests','road_test.yaml')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The filename for the YAML file is the first argument when creating a :class:`Scope`\n",
    "object, which will load and process the content of the file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<emat.Scope with 2 constants, 7 uncertainties, 4 levers, 7 measures>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "road_scope = emat.Scope(road_test_scope_file)\n",
    "road_scope"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A short summary of the scope can be reviewed using the `info` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name: EMAT Road Test\n",
      "desc: prototype run\n",
      "constants:\n",
      "  free_flow_time = 60\n",
      "  initial_capacity = 100\n",
      "uncertainties:\n",
      "  alpha = 0.1 to 0.2\n",
      "  beta = 3.5 to 5.5\n",
      "  input_flow = 80 to 150\n",
      "  value_of_time = 0.001 to 0.08\n",
      "  unit_cost_expansion = 95.0 to 145.0\n",
      "  interest_rate = 0.025 to 0.04\n",
      "  yield_curve = -0.0025 to 0.02\n",
      "levers:\n",
      "  expand_capacity = 0.0 to 100.0\n",
      "  amortization_period = 15 to 50\n",
      "  debt_type = categorical\n",
      "  interest_rate_lock = boolean\n",
      "measures:\n",
      "  no_build_travel_time\n",
      "  build_travel_time\n",
      "  time_savings\n",
      "  value_of_time_savings\n",
      "  net_benefits\n",
      "  cost_of_capacity_expansion\n",
      "  present_cost_expansion\n"
     ]
    }
   ],
   "source": [
    "road_scope.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, more detailed information about each part of the scope can be\n",
    "accessed in four list attributes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Constant('free_flow_time', 60), Constant('initial_capacity', 100)]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "road_scope.get_constants()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<emat.RealParameter 'alpha'>,\n",
       " <emat.RealParameter 'beta'>,\n",
       " <emat.IntegerParameter 'input_flow'>,\n",
       " <emat.RealParameter 'value_of_time'>,\n",
       " <emat.RealParameter 'unit_cost_expansion'>,\n",
       " <emat.RealParameter 'interest_rate'>,\n",
       " <emat.RealParameter 'yield_curve'>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "road_scope.get_uncertainties()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<emat.RealParameter 'expand_capacity'>,\n",
       " <emat.IntegerParameter 'amortization_period'>,\n",
       " <emat.CategoricalParameter 'debt_type'>,\n",
       " <emat.BooleanParameter 'interest_rate_lock'>]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "road_scope.get_levers()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Measure('no_build_travel_time'),\n",
       " Measure('build_travel_time'),\n",
       " Measure('time_savings'),\n",
       " Measure('value_of_time_savings'),\n",
       " Measure('net_benefits'),\n",
       " Measure('cost_of_capacity_expansion'),\n",
       " Measure('present_cost_expansion')]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "road_scope.get_measures()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using a Database\n",
    "\n",
    "The exploratory modeling process will typically generate many different sets of outputs,\n",
    "for different explored modeling scopes, or for different applications.  It is convenient\n",
    "to organize these outputs in a database structure, so they are stored consistently and \n",
    "readily available for subsequent analysis.\n",
    "\n",
    "The `SQLiteDB` object will create a database to store results.  When instantiated with\n",
    "no arguments, the database is initialized in-memory, which will not store anything to\n",
    "disk (which is convenient for this example, but in practice you will generally want to\n",
    "store data to disk so that it can persist after this Python session ends)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[00:03.36] MainProcess/INFO: running script scope.sql\n",
      "[00:03.36] MainProcess/INFO: running script exp_design.sql\n",
      "[00:03.36] MainProcess/INFO: running script meta_model.sql\n"
     ]
    }
   ],
   "source": [
    "emat_db = emat.SQLiteDB()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An EMAT Scope can be stored in the database, to provide needed information about what the \n",
    "various inputs and outputs represent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "road_scope.store_scope(emat_db)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Trying to store another scope with the same name (or the same scope) raises a KeyError."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'scope named \"EMAT Road Test\" already exists'\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    road_scope.store_scope(emat_db)\n",
    "except KeyError as err:\n",
    "    print(err)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can review the names of scopes already stored in the database using the `read_scope_names` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['EMAT Road Test']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emat_db.read_scope_names()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Experimental Design\n",
    "\n",
    "Actually running the model can be done by the user on an *ad hoc* basis (i.e., manually defining every \n",
    "combination of inputs that will be evaluated) but the real power of EMAT comes from runnning the model\n",
    "using algorithm-created experimental designs.\n",
    "\n",
    "An important experimental design used in exploratory modeling is the Latin Hypercube.  This design selects\n",
    "a random set of experiments across multiple input dimensions, to ensure \"good\" coverage of the \n",
    "multi-dimensional modeling space.\n",
    "\n",
    "The `design_latin_hypercube` function creates such a design based on a `Scope`, and optionally\n",
    "stores the design of experiments in a database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.experiment.experimental_design import design_experiments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>beta</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>free_flow_time</th>\n",
       "      <th>initial_capacity</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.184682</td>\n",
       "      <td>38</td>\n",
       "      <td>5.237143</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>18.224793</td>\n",
       "      <td>115</td>\n",
       "      <td>0.031645</td>\n",
       "      <td>False</td>\n",
       "      <td>118.213466</td>\n",
       "      <td>0.022518</td>\n",
       "      <td>0.015659</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.166133</td>\n",
       "      <td>36</td>\n",
       "      <td>4.121963</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>87.525790</td>\n",
       "      <td>129</td>\n",
       "      <td>0.037612</td>\n",
       "      <td>True</td>\n",
       "      <td>141.322696</td>\n",
       "      <td>0.052306</td>\n",
       "      <td>0.007307</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.198937</td>\n",
       "      <td>44</td>\n",
       "      <td>4.719838</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>45.698048</td>\n",
       "      <td>105</td>\n",
       "      <td>0.028445</td>\n",
       "      <td>False</td>\n",
       "      <td>97.783320</td>\n",
       "      <td>0.011923</td>\n",
       "      <td>-0.001545</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.158758</td>\n",
       "      <td>42</td>\n",
       "      <td>4.915816</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>51.297546</td>\n",
       "      <td>113</td>\n",
       "      <td>0.036234</td>\n",
       "      <td>True</td>\n",
       "      <td>127.224901</td>\n",
       "      <td>0.077527</td>\n",
       "      <td>0.004342</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.157671</td>\n",
       "      <td>42</td>\n",
       "      <td>3.845952</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>22.824149</td>\n",
       "      <td>133</td>\n",
       "      <td>0.039257</td>\n",
       "      <td>False</td>\n",
       "      <td>107.820482</td>\n",
       "      <td>0.027270</td>\n",
       "      <td>0.001558</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               alpha  amortization_period      beta debt_type  \\\n",
       "experiment                                                      \n",
       "1           0.184682                   38  5.237143  Rev Bond   \n",
       "2           0.166133                   36  4.121963     Paygo   \n",
       "3           0.198937                   44  4.719838   GO Bond   \n",
       "4           0.158758                   42  4.915816   GO Bond   \n",
       "5           0.157671                   42  3.845952     Paygo   \n",
       "\n",
       "            expand_capacity  input_flow  interest_rate  interest_rate_lock  \\\n",
       "experiment                                                                   \n",
       "1                 18.224793         115       0.031645               False   \n",
       "2                 87.525790         129       0.037612                True   \n",
       "3                 45.698048         105       0.028445               False   \n",
       "4                 51.297546         113       0.036234                True   \n",
       "5                 22.824149         133       0.039257               False   \n",
       "\n",
       "            unit_cost_expansion  value_of_time  yield_curve  free_flow_time  \\\n",
       "experiment                                                                    \n",
       "1                    118.213466       0.022518     0.015659              60   \n",
       "2                    141.322696       0.052306     0.007307              60   \n",
       "3                     97.783320       0.011923    -0.001545              60   \n",
       "4                    127.224901       0.077527     0.004342              60   \n",
       "5                    107.820482       0.027270     0.001558              60   \n",
       "\n",
       "            initial_capacity  \n",
       "experiment                    \n",
       "1                        100  \n",
       "2                        100  \n",
       "3                        100  \n",
       "4                        100  \n",
       "5                        100  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "design = design_experiments(road_scope, db=emat_db, n_samples_per_factor=10, sampler='lhs')\n",
    "design.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>beta</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>free_flow_time</th>\n",
       "      <th>initial_capacity</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>0.154130</td>\n",
       "      <td>21</td>\n",
       "      <td>5.061648</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>75.542217</td>\n",
       "      <td>112</td>\n",
       "      <td>0.029885</td>\n",
       "      <td>True</td>\n",
       "      <td>124.452736</td>\n",
       "      <td>0.020584</td>\n",
       "      <td>0.001425</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>0.148731</td>\n",
       "      <td>29</td>\n",
       "      <td>4.088663</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>91.184595</td>\n",
       "      <td>145</td>\n",
       "      <td>0.028659</td>\n",
       "      <td>False</td>\n",
       "      <td>131.688623</td>\n",
       "      <td>0.017927</td>\n",
       "      <td>0.007850</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>0.124027</td>\n",
       "      <td>34</td>\n",
       "      <td>3.956884</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>60.436585</td>\n",
       "      <td>80</td>\n",
       "      <td>0.038101</td>\n",
       "      <td>False</td>\n",
       "      <td>95.462532</td>\n",
       "      <td>0.014444</td>\n",
       "      <td>0.011101</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>0.129724</td>\n",
       "      <td>41</td>\n",
       "      <td>4.969628</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>74.271040</td>\n",
       "      <td>139</td>\n",
       "      <td>0.029665</td>\n",
       "      <td>False</td>\n",
       "      <td>98.206495</td>\n",
       "      <td>0.013711</td>\n",
       "      <td>0.010072</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>0.185723</td>\n",
       "      <td>22</td>\n",
       "      <td>4.485432</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>61.084166</td>\n",
       "      <td>95</td>\n",
       "      <td>0.039195</td>\n",
       "      <td>False</td>\n",
       "      <td>140.792308</td>\n",
       "      <td>0.068903</td>\n",
       "      <td>0.019277</td>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               alpha  amortization_period      beta debt_type  \\\n",
       "experiment                                                      \n",
       "111         0.154130                   21  5.061648  Rev Bond   \n",
       "112         0.148731                   29  4.088663  Rev Bond   \n",
       "113         0.124027                   34  3.956884     Paygo   \n",
       "114         0.129724                   41  4.969628     Paygo   \n",
       "115         0.185723                   22  4.485432     Paygo   \n",
       "\n",
       "            expand_capacity  input_flow  interest_rate  interest_rate_lock  \\\n",
       "experiment                                                                   \n",
       "111               75.542217         112       0.029885                True   \n",
       "112               91.184595         145       0.028659               False   \n",
       "113               60.436585          80       0.038101               False   \n",
       "114               74.271040         139       0.029665               False   \n",
       "115               61.084166          95       0.039195               False   \n",
       "\n",
       "            unit_cost_expansion  value_of_time  yield_curve  free_flow_time  \\\n",
       "experiment                                                                    \n",
       "111                  124.452736       0.020584     0.001425              60   \n",
       "112                  131.688623       0.017927     0.007850              60   \n",
       "113                   95.462532       0.014444     0.011101              60   \n",
       "114                   98.206495       0.013711     0.010072              60   \n",
       "115                  140.792308       0.068903     0.019277              60   \n",
       "\n",
       "            initial_capacity  \n",
       "experiment                    \n",
       "111                      100  \n",
       "112                      100  \n",
       "113                      100  \n",
       "114                      100  \n",
       "115                      100  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "large_design = design_experiments(road_scope, db=emat_db, n_samples=5000, sampler='lhs', design_name='lhs_large')\n",
    "large_design.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can review what experimental designs have already been stored in the database using the \n",
    "`read_design_names` method of the `Database` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['lhs', 'lhs_large']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emat_db.read_design_names('EMAT Road Test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Core Model in Python"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Up until this point, we have been considering a model in the abstract, defining in the :class:`Scope` what the inputs \n",
    "and outputs will be, and designing some experiments we would like to run with the model.  Now we will actually \n",
    "interface with the model itself. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Definition\n",
    "\n",
    "In the simplest approach for EMAT, a model can be defined as a basic Python function, which accepts all\n",
    "inputs (exogenous uncertainties, policy levers, and externally defined constants) as named keyword\n",
    "arguments, and returns a dictionary where the dictionary keys are names of performace measures, and \n",
    "the mapped values are the computed values for those performance measures.  The `Road_Capacity_Investment`\n",
    "function provided in EMAT is an example of such a function.  This made-up example considers the \n",
    "investment in capacity expansion for a single roadway link.  The inputs to this function are described\n",
    "above in the Scope, including uncertain parameters in the volume-delay function,\n",
    "traffic volumes, value of travel time savings, unit construction costs, and interest rates, and policy levers including the \n",
    "amount of capacity expansion and amortization period."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.model.core_python import PythonCoreModel\n",
    "from emat.model.core_python import Road_Capacity_Investment"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The :class:`PythonCoreModel <emat.model.core_python.core_python_api.PythonCoreModel>` object \n",
    "provides an interface that links the basic Python function that represents \n",
    "the model, the :class:`Scope <emat.scope.scope.Scope>`, and optionally the \n",
    ":class:`Database <emat.database.database.Database>` used to manage data storage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = PythonCoreModel(Road_Capacity_Investment, scope=road_scope, db=emat_db)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "From the :class:`PythonCoreModel`, which links the model, scope, design, and database, we can run the design of experiments.  \n",
    "This will systematically run the core model with each set of input parameters in the design, store the results in\n",
    "the database, and return a pandas.DataFrame containing the results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Execution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ema_workbench import SequentialEvaluator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[00:05.14] MainProcess/INFO: performing 110 scenarios/policies * 1 model(s) = 110 experiments\n",
      "[00:05.15] MainProcess/INFO: performing experiments sequentially\n",
      "[00:05.16] MainProcess/INFO: 11 cases completed\n",
      "[00:05.16] MainProcess/INFO: 22 cases completed\n",
      "[00:05.17] MainProcess/INFO: 33 cases completed\n",
      "[00:05.17] MainProcess/INFO: 44 cases completed\n",
      "[00:05.18] MainProcess/INFO: 55 cases completed\n",
      "[00:05.18] MainProcess/INFO: 66 cases completed\n",
      "[00:05.18] MainProcess/INFO: 77 cases completed\n",
      "[00:05.19] MainProcess/INFO: 88 cases completed\n",
      "[00:05.19] MainProcess/INFO: 99 cases completed\n",
      "[00:05.20] MainProcess/INFO: 110 cases completed\n",
      "[00:05.20] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "      <th>no_build_travel_time</th>\n",
       "      <th>build_travel_time</th>\n",
       "      <th>time_savings</th>\n",
       "      <th>value_of_time_savings</th>\n",
       "      <th>net_benefits</th>\n",
       "      <th>cost_of_capacity_expansion</th>\n",
       "      <th>present_cost_expansion</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.184682</td>\n",
       "      <td>5.237143</td>\n",
       "      <td>115</td>\n",
       "      <td>0.022518</td>\n",
       "      <td>118.213466</td>\n",
       "      <td>0.031645</td>\n",
       "      <td>0.015659</td>\n",
       "      <td>18.224793</td>\n",
       "      <td>38</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>83.038716</td>\n",
       "      <td>69.586789</td>\n",
       "      <td>13.451927</td>\n",
       "      <td>34.835362</td>\n",
       "      <td>-79.515515</td>\n",
       "      <td>114.350877</td>\n",
       "      <td>2154.415985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.166133</td>\n",
       "      <td>4.121963</td>\n",
       "      <td>129</td>\n",
       "      <td>0.052306</td>\n",
       "      <td>141.322696</td>\n",
       "      <td>0.037612</td>\n",
       "      <td>0.007307</td>\n",
       "      <td>87.525790</td>\n",
       "      <td>36</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>True</td>\n",
       "      <td>88.474313</td>\n",
       "      <td>62.132583</td>\n",
       "      <td>26.341730</td>\n",
       "      <td>177.741192</td>\n",
       "      <td>-205.321480</td>\n",
       "      <td>383.062672</td>\n",
       "      <td>12369.380535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.198937</td>\n",
       "      <td>4.719838</td>\n",
       "      <td>105</td>\n",
       "      <td>0.011923</td>\n",
       "      <td>97.783320</td>\n",
       "      <td>0.028445</td>\n",
       "      <td>-0.001545</td>\n",
       "      <td>45.698048</td>\n",
       "      <td>44</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>75.027180</td>\n",
       "      <td>62.543328</td>\n",
       "      <td>12.483852</td>\n",
       "      <td>15.629037</td>\n",
       "      <td>-151.944318</td>\n",
       "      <td>167.573355</td>\n",
       "      <td>4468.506839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.158758</td>\n",
       "      <td>4.915816</td>\n",
       "      <td>113</td>\n",
       "      <td>0.077527</td>\n",
       "      <td>127.224901</td>\n",
       "      <td>0.036234</td>\n",
       "      <td>0.004342</td>\n",
       "      <td>51.297546</td>\n",
       "      <td>42</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>True</td>\n",
       "      <td>77.370428</td>\n",
       "      <td>62.268768</td>\n",
       "      <td>15.101660</td>\n",
       "      <td>132.298475</td>\n",
       "      <td>-167.624871</td>\n",
       "      <td>299.923347</td>\n",
       "      <td>6526.325171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.157671</td>\n",
       "      <td>3.845952</td>\n",
       "      <td>133</td>\n",
       "      <td>0.027270</td>\n",
       "      <td>107.820482</td>\n",
       "      <td>0.039257</td>\n",
       "      <td>0.001558</td>\n",
       "      <td>22.824149</td>\n",
       "      <td>42</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>False</td>\n",
       "      <td>88.328990</td>\n",
       "      <td>72.848428</td>\n",
       "      <td>15.480561</td>\n",
       "      <td>56.146908</td>\n",
       "      <td>-3.972940</td>\n",
       "      <td>60.119848</td>\n",
       "      <td>2460.910705</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               alpha      beta  input_flow  value_of_time  \\\n",
       "experiment                                                  \n",
       "1           0.184682  5.237143         115       0.022518   \n",
       "2           0.166133  4.121963         129       0.052306   \n",
       "3           0.198937  4.719838         105       0.011923   \n",
       "4           0.158758  4.915816         113       0.077527   \n",
       "5           0.157671  3.845952         133       0.027270   \n",
       "\n",
       "            unit_cost_expansion  interest_rate  yield_curve  expand_capacity  \\\n",
       "experiment                                                                     \n",
       "1                    118.213466       0.031645     0.015659        18.224793   \n",
       "2                    141.322696       0.037612     0.007307        87.525790   \n",
       "3                     97.783320       0.028445    -0.001545        45.698048   \n",
       "4                    127.224901       0.036234     0.004342        51.297546   \n",
       "5                    107.820482       0.039257     0.001558        22.824149   \n",
       "\n",
       "            amortization_period debt_type  interest_rate_lock  \\\n",
       "experiment                                                      \n",
       "1                            38  Rev Bond               False   \n",
       "2                            36     Paygo                True   \n",
       "3                            44   GO Bond               False   \n",
       "4                            42   GO Bond                True   \n",
       "5                            42     Paygo               False   \n",
       "\n",
       "            no_build_travel_time  build_travel_time  time_savings  \\\n",
       "experiment                                                          \n",
       "1                      83.038716          69.586789     13.451927   \n",
       "2                      88.474313          62.132583     26.341730   \n",
       "3                      75.027180          62.543328     12.483852   \n",
       "4                      77.370428          62.268768     15.101660   \n",
       "5                      88.328990          72.848428     15.480561   \n",
       "\n",
       "            value_of_time_savings  net_benefits  cost_of_capacity_expansion  \\\n",
       "experiment                                                                    \n",
       "1                       34.835362    -79.515515                  114.350877   \n",
       "2                      177.741192   -205.321480                  383.062672   \n",
       "3                       15.629037   -151.944318                  167.573355   \n",
       "4                      132.298475   -167.624871                  299.923347   \n",
       "5                       56.146908     -3.972940                   60.119848   \n",
       "\n",
       "            present_cost_expansion  \n",
       "experiment                          \n",
       "1                      2154.415985  \n",
       "2                     12369.380535  \n",
       "3                      4468.506839  \n",
       "4                      6526.325171  \n",
       "5                      2460.910705  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with SequentialEvaluator(m) as eval_seq:\n",
    "    lhs_results = m.run_experiments(design_name='lhs', evaluator=eval_seq)\n",
    "lhs_results.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once a particular design has been run once, the results can be recovered from the database without re-running the model itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>free_flow_time</th>\n",
       "      <th>initial_capacity</th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "      <th>no_build_travel_time</th>\n",
       "      <th>build_travel_time</th>\n",
       "      <th>time_savings</th>\n",
       "      <th>value_of_time_savings</th>\n",
       "      <th>net_benefits</th>\n",
       "      <th>cost_of_capacity_expansion</th>\n",
       "      <th>present_cost_expansion</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "      <td>0.184682</td>\n",
       "      <td>5.237143</td>\n",
       "      <td>115</td>\n",
       "      <td>0.022518</td>\n",
       "      <td>118.213466</td>\n",
       "      <td>0.031645</td>\n",
       "      <td>0.015659</td>\n",
       "      <td>18.224793</td>\n",
       "      <td>38</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>83.0387</td>\n",
       "      <td>69.5868</td>\n",
       "      <td>13.4519</td>\n",
       "      <td>34.8354</td>\n",
       "      <td>-79.5155</td>\n",
       "      <td>114.351</td>\n",
       "      <td>2154.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "      <td>0.166133</td>\n",
       "      <td>4.121963</td>\n",
       "      <td>129</td>\n",
       "      <td>0.052306</td>\n",
       "      <td>141.322696</td>\n",
       "      <td>0.037612</td>\n",
       "      <td>0.007307</td>\n",
       "      <td>87.525790</td>\n",
       "      <td>36</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>True</td>\n",
       "      <td>88.4743</td>\n",
       "      <td>62.1326</td>\n",
       "      <td>26.3417</td>\n",
       "      <td>177.741</td>\n",
       "      <td>-205.321</td>\n",
       "      <td>383.063</td>\n",
       "      <td>12369.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "      <td>0.198937</td>\n",
       "      <td>4.719838</td>\n",
       "      <td>105</td>\n",
       "      <td>0.011923</td>\n",
       "      <td>97.783320</td>\n",
       "      <td>0.028445</td>\n",
       "      <td>-0.001545</td>\n",
       "      <td>45.698048</td>\n",
       "      <td>44</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>75.0272</td>\n",
       "      <td>62.5433</td>\n",
       "      <td>12.4839</td>\n",
       "      <td>15.629</td>\n",
       "      <td>-151.944</td>\n",
       "      <td>167.573</td>\n",
       "      <td>4468.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "      <td>0.158758</td>\n",
       "      <td>4.915816</td>\n",
       "      <td>113</td>\n",
       "      <td>0.077527</td>\n",
       "      <td>127.224901</td>\n",
       "      <td>0.036234</td>\n",
       "      <td>0.004342</td>\n",
       "      <td>51.297546</td>\n",
       "      <td>42</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>True</td>\n",
       "      <td>77.3704</td>\n",
       "      <td>62.2688</td>\n",
       "      <td>15.1017</td>\n",
       "      <td>132.298</td>\n",
       "      <td>-167.625</td>\n",
       "      <td>299.923</td>\n",
       "      <td>6526.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "      <td>0.157671</td>\n",
       "      <td>3.845952</td>\n",
       "      <td>133</td>\n",
       "      <td>0.027270</td>\n",
       "      <td>107.820482</td>\n",
       "      <td>0.039257</td>\n",
       "      <td>0.001558</td>\n",
       "      <td>22.824149</td>\n",
       "      <td>42</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>False</td>\n",
       "      <td>88.329</td>\n",
       "      <td>72.8484</td>\n",
       "      <td>15.4806</td>\n",
       "      <td>56.1469</td>\n",
       "      <td>-3.97294</td>\n",
       "      <td>60.1198</td>\n",
       "      <td>2460.91</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            free_flow_time  initial_capacity     alpha      beta  input_flow  \\\n",
       "experiment                                                                     \n",
       "1                       60               100  0.184682  5.237143         115   \n",
       "2                       60               100  0.166133  4.121963         129   \n",
       "3                       60               100  0.198937  4.719838         105   \n",
       "4                       60               100  0.158758  4.915816         113   \n",
       "5                       60               100  0.157671  3.845952         133   \n",
       "\n",
       "            value_of_time  unit_cost_expansion  interest_rate  yield_curve  \\\n",
       "experiment                                                                   \n",
       "1                0.022518           118.213466       0.031645     0.015659   \n",
       "2                0.052306           141.322696       0.037612     0.007307   \n",
       "3                0.011923            97.783320       0.028445    -0.001545   \n",
       "4                0.077527           127.224901       0.036234     0.004342   \n",
       "5                0.027270           107.820482       0.039257     0.001558   \n",
       "\n",
       "            expand_capacity  amortization_period debt_type  \\\n",
       "experiment                                                   \n",
       "1                 18.224793                   38  Rev Bond   \n",
       "2                 87.525790                   36     Paygo   \n",
       "3                 45.698048                   44   GO Bond   \n",
       "4                 51.297546                   42   GO Bond   \n",
       "5                 22.824149                   42     Paygo   \n",
       "\n",
       "            interest_rate_lock no_build_travel_time build_travel_time  \\\n",
       "experiment                                                              \n",
       "1                        False              83.0387           69.5868   \n",
       "2                         True              88.4743           62.1326   \n",
       "3                        False              75.0272           62.5433   \n",
       "4                         True              77.3704           62.2688   \n",
       "5                        False               88.329           72.8484   \n",
       "\n",
       "           time_savings value_of_time_savings net_benefits  \\\n",
       "experiment                                                   \n",
       "1               13.4519               34.8354     -79.5155   \n",
       "2               26.3417               177.741     -205.321   \n",
       "3               12.4839                15.629     -151.944   \n",
       "4               15.1017               132.298     -167.625   \n",
       "5               15.4806               56.1469     -3.97294   \n",
       "\n",
       "           cost_of_capacity_expansion present_cost_expansion  \n",
       "experiment                                                    \n",
       "1                             114.351                2154.42  \n",
       "2                             383.063                12369.4  \n",
       "3                             167.573                4468.51  \n",
       "4                             299.923                6526.33  \n",
       "5                             60.1198                2460.91  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reload_results = m.read_experiments(design_name='lhs')\n",
    "reload_results.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is also possible to load only the parameters, or only the performance meausures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>free_flow_time</th>\n",
       "      <th>initial_capacity</th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "      <td>0.184682</td>\n",
       "      <td>5.237143</td>\n",
       "      <td>115</td>\n",
       "      <td>0.022518</td>\n",
       "      <td>118.213466</td>\n",
       "      <td>0.031645</td>\n",
       "      <td>0.015659</td>\n",
       "      <td>18.224793</td>\n",
       "      <td>38</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "      <td>0.166133</td>\n",
       "      <td>4.121963</td>\n",
       "      <td>129</td>\n",
       "      <td>0.052306</td>\n",
       "      <td>141.322696</td>\n",
       "      <td>0.037612</td>\n",
       "      <td>0.007307</td>\n",
       "      <td>87.525790</td>\n",
       "      <td>36</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "      <td>0.198937</td>\n",
       "      <td>4.719838</td>\n",
       "      <td>105</td>\n",
       "      <td>0.011923</td>\n",
       "      <td>97.783320</td>\n",
       "      <td>0.028445</td>\n",
       "      <td>-0.001545</td>\n",
       "      <td>45.698048</td>\n",
       "      <td>44</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "      <td>0.158758</td>\n",
       "      <td>4.915816</td>\n",
       "      <td>113</td>\n",
       "      <td>0.077527</td>\n",
       "      <td>127.224901</td>\n",
       "      <td>0.036234</td>\n",
       "      <td>0.004342</td>\n",
       "      <td>51.297546</td>\n",
       "      <td>42</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>60</td>\n",
       "      <td>100</td>\n",
       "      <td>0.157671</td>\n",
       "      <td>3.845952</td>\n",
       "      <td>133</td>\n",
       "      <td>0.027270</td>\n",
       "      <td>107.820482</td>\n",
       "      <td>0.039257</td>\n",
       "      <td>0.001558</td>\n",
       "      <td>22.824149</td>\n",
       "      <td>42</td>\n",
       "      <td>Paygo</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            free_flow_time  initial_capacity     alpha      beta  input_flow  \\\n",
       "experiment                                                                     \n",
       "1                       60               100  0.184682  5.237143         115   \n",
       "2                       60               100  0.166133  4.121963         129   \n",
       "3                       60               100  0.198937  4.719838         105   \n",
       "4                       60               100  0.158758  4.915816         113   \n",
       "5                       60               100  0.157671  3.845952         133   \n",
       "\n",
       "            value_of_time  unit_cost_expansion  interest_rate  yield_curve  \\\n",
       "experiment                                                                   \n",
       "1                0.022518           118.213466       0.031645     0.015659   \n",
       "2                0.052306           141.322696       0.037612     0.007307   \n",
       "3                0.011923            97.783320       0.028445    -0.001545   \n",
       "4                0.077527           127.224901       0.036234     0.004342   \n",
       "5                0.027270           107.820482       0.039257     0.001558   \n",
       "\n",
       "            expand_capacity  amortization_period debt_type  interest_rate_lock  \n",
       "experiment                                                                      \n",
       "1                 18.224793                   38  Rev Bond               False  \n",
       "2                 87.525790                   36     Paygo                True  \n",
       "3                 45.698048                   44   GO Bond               False  \n",
       "4                 51.297546                   42   GO Bond                True  \n",
       "5                 22.824149                   42     Paygo               False  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lhs_params = m.read_experiment_parameters(design_name='lhs')\n",
    "lhs_params.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>no_build_travel_time</th>\n",
       "      <th>build_travel_time</th>\n",
       "      <th>time_savings</th>\n",
       "      <th>value_of_time_savings</th>\n",
       "      <th>net_benefits</th>\n",
       "      <th>cost_of_capacity_expansion</th>\n",
       "      <th>present_cost_expansion</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>83.038716</td>\n",
       "      <td>69.586789</td>\n",
       "      <td>13.451927</td>\n",
       "      <td>34.835362</td>\n",
       "      <td>-79.515515</td>\n",
       "      <td>114.350877</td>\n",
       "      <td>2154.415985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>88.474313</td>\n",
       "      <td>62.132583</td>\n",
       "      <td>26.341730</td>\n",
       "      <td>177.741192</td>\n",
       "      <td>-205.321480</td>\n",
       "      <td>383.062672</td>\n",
       "      <td>12369.380535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>75.027180</td>\n",
       "      <td>62.543328</td>\n",
       "      <td>12.483852</td>\n",
       "      <td>15.629037</td>\n",
       "      <td>-151.944318</td>\n",
       "      <td>167.573355</td>\n",
       "      <td>4468.506839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77.370428</td>\n",
       "      <td>62.268768</td>\n",
       "      <td>15.101660</td>\n",
       "      <td>132.298475</td>\n",
       "      <td>-167.624871</td>\n",
       "      <td>299.923347</td>\n",
       "      <td>6526.325171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>88.328990</td>\n",
       "      <td>72.848428</td>\n",
       "      <td>15.480561</td>\n",
       "      <td>56.146908</td>\n",
       "      <td>-3.972940</td>\n",
       "      <td>60.119848</td>\n",
       "      <td>2460.910705</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            no_build_travel_time  build_travel_time  time_savings  \\\n",
       "experiment                                                          \n",
       "1                      83.038716          69.586789     13.451927   \n",
       "2                      88.474313          62.132583     26.341730   \n",
       "3                      75.027180          62.543328     12.483852   \n",
       "4                      77.370428          62.268768     15.101660   \n",
       "5                      88.328990          72.848428     15.480561   \n",
       "\n",
       "            value_of_time_savings  net_benefits  cost_of_capacity_expansion  \\\n",
       "experiment                                                                    \n",
       "1                       34.835362    -79.515515                  114.350877   \n",
       "2                      177.741192   -205.321480                  383.062672   \n",
       "3                       15.629037   -151.944318                  167.573355   \n",
       "4                      132.298475   -167.624871                  299.923347   \n",
       "5                       56.146908     -3.972940                   60.119848   \n",
       "\n",
       "            present_cost_expansion  \n",
       "experiment                          \n",
       "1                      2154.415985  \n",
       "2                     12369.380535  \n",
       "3                      4468.506839  \n",
       "4                      6526.325171  \n",
       "5                      2460.910705  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lhs_outcomes = m.read_experiment_measures(design_name='lhs')\n",
    "lhs_outcomes.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating a Meta-Model"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Creating a meta-model requires an existing model, plus a set of \n",
    "experiments (including inputs and outputs) run with that model\n",
    "to support the estimation of the meta-model.  After having completed\n",
    "sufficient initial runs of the core model, instantiating a meta-model\n",
    "is as simple as calling a `create_metamodel_*` method on the core\n",
    "model, either giving a design of experiments stored in the database\n",
    "with :meth:`create_metamodel_from_design <emat.AbstractCoreModel.create_metamodel_from_design>`\n",
    "or passing the experimental results directly with\n",
    ":meth:`create_metamodel_from_data <emat.AbstractCoreModel.create_metamodel_from_data>`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<emat.PythonCoreModel \"EMATMeta\", metamodel_id=1 with 2 constants, 7 uncertainties, 4 levers, 7 measures>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mm = m.create_metamodel_from_design('lhs')\n",
    "mm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To demonstrate the performance of the meta-model, we can create an\n",
    "alternate design of experiments.  Note that to get different random values,\n",
    "we set the `random_seed` argument to something other than the default value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "design2 = design_experiments(road_scope, db=emat_db, n_samples_per_factor=10, sampler='lhs', random_seed=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[00:19.42] MainProcess/INFO: performing 110 scenarios/policies * 1 model(s) = 110 experiments\n",
      "[00:19.44] MainProcess/INFO: performing experiments sequentially\n",
      "[00:19.51] MainProcess/INFO: 11 cases completed\n",
      "[00:19.59] MainProcess/INFO: 22 cases completed\n",
      "[00:19.67] MainProcess/INFO: 33 cases completed\n",
      "[00:19.74] MainProcess/INFO: 44 cases completed\n",
      "[00:19.82] MainProcess/INFO: 55 cases completed\n",
      "[00:19.89] MainProcess/INFO: 66 cases completed\n",
      "[00:19.97] MainProcess/INFO: 77 cases completed\n",
      "[00:20.04] MainProcess/INFO: 88 cases completed\n",
      "[00:20.11] MainProcess/INFO: 99 cases completed\n",
      "[00:20.19] MainProcess/INFO: 110 cases completed\n",
      "[00:20.19] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>input_flow</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>unit_cost_expansion</th>\n",
       "      <th>interest_rate</th>\n",
       "      <th>yield_curve</th>\n",
       "      <th>expand_capacity</th>\n",
       "      <th>amortization_period</th>\n",
       "      <th>debt_type</th>\n",
       "      <th>interest_rate_lock</th>\n",
       "      <th>no_build_travel_time</th>\n",
       "      <th>build_travel_time</th>\n",
       "      <th>time_savings</th>\n",
       "      <th>value_of_time_savings</th>\n",
       "      <th>net_benefits</th>\n",
       "      <th>cost_of_capacity_expansion</th>\n",
       "      <th>present_cost_expansion</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experiment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5111</th>\n",
       "      <td>0.113526</td>\n",
       "      <td>5.344274</td>\n",
       "      <td>142</td>\n",
       "      <td>0.040515</td>\n",
       "      <td>131.820315</td>\n",
       "      <td>0.033177</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>75.218326</td>\n",
       "      <td>48</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>True</td>\n",
       "      <td>102.833065</td>\n",
       "      <td>62.688732</td>\n",
       "      <td>36.266819</td>\n",
       "      <td>284.723737</td>\n",
       "      <td>-196.031826</td>\n",
       "      <td>271.032897</td>\n",
       "      <td>9838.355785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5112</th>\n",
       "      <td>0.112148</td>\n",
       "      <td>4.579477</td>\n",
       "      <td>132</td>\n",
       "      <td>0.021664</td>\n",
       "      <td>133.709154</td>\n",
       "      <td>0.034554</td>\n",
       "      <td>0.005657</td>\n",
       "      <td>24.154443</td>\n",
       "      <td>29</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>83.908347</td>\n",
       "      <td>68.641033</td>\n",
       "      <td>15.972747</td>\n",
       "      <td>38.907614</td>\n",
       "      <td>-191.635603</td>\n",
       "      <td>186.536127</td>\n",
       "      <td>3544.451471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5113</th>\n",
       "      <td>0.119548</td>\n",
       "      <td>4.353462</td>\n",
       "      <td>148</td>\n",
       "      <td>0.011675</td>\n",
       "      <td>95.650097</td>\n",
       "      <td>0.032211</td>\n",
       "      <td>0.013589</td>\n",
       "      <td>84.003562</td>\n",
       "      <td>32</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>100.006295</td>\n",
       "      <td>63.168795</td>\n",
       "      <td>71.082783</td>\n",
       "      <td>129.102795</td>\n",
       "      <td>-369.047388</td>\n",
       "      <td>593.526354</td>\n",
       "      <td>8842.437317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5114</th>\n",
       "      <td>0.102516</td>\n",
       "      <td>4.490051</td>\n",
       "      <td>150</td>\n",
       "      <td>0.079379</td>\n",
       "      <td>136.919028</td>\n",
       "      <td>0.028362</td>\n",
       "      <td>-0.001315</td>\n",
       "      <td>51.580600</td>\n",
       "      <td>42</td>\n",
       "      <td>GO Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>102.751368</td>\n",
       "      <td>66.356726</td>\n",
       "      <td>25.107086</td>\n",
       "      <td>450.797033</td>\n",
       "      <td>-17.574178</td>\n",
       "      <td>280.306588</td>\n",
       "      <td>7846.375512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5115</th>\n",
       "      <td>0.140831</td>\n",
       "      <td>5.024638</td>\n",
       "      <td>120</td>\n",
       "      <td>0.027366</td>\n",
       "      <td>115.270765</td>\n",
       "      <td>0.033885</td>\n",
       "      <td>0.009138</td>\n",
       "      <td>74.351908</td>\n",
       "      <td>17</td>\n",
       "      <td>Rev Bond</td>\n",
       "      <td>False</td>\n",
       "      <td>80.856905</td>\n",
       "      <td>61.320195</td>\n",
       "      <td>19.363125</td>\n",
       "      <td>73.777238</td>\n",
       "      <td>-514.200181</td>\n",
       "      <td>727.206229</td>\n",
       "      <td>8643.653243</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               alpha      beta  input_flow  value_of_time  \\\n",
       "experiment                                                  \n",
       "5111        0.113526  5.344274         142       0.040515   \n",
       "5112        0.112148  4.579477         132       0.021664   \n",
       "5113        0.119548  4.353462         148       0.011675   \n",
       "5114        0.102516  4.490051         150       0.079379   \n",
       "5115        0.140831  5.024638         120       0.027366   \n",
       "\n",
       "            unit_cost_expansion  interest_rate  yield_curve  expand_capacity  \\\n",
       "experiment                                                                     \n",
       "5111                 131.820315       0.033177     0.000400        75.218326   \n",
       "5112                 133.709154       0.034554     0.005657        24.154443   \n",
       "5113                  95.650097       0.032211     0.013589        84.003562   \n",
       "5114                 136.919028       0.028362    -0.001315        51.580600   \n",
       "5115                 115.270765       0.033885     0.009138        74.351908   \n",
       "\n",
       "            amortization_period debt_type  interest_rate_lock  \\\n",
       "experiment                                                      \n",
       "5111                         48   GO Bond                True   \n",
       "5112                         29  Rev Bond               False   \n",
       "5113                         32  Rev Bond               False   \n",
       "5114                         42   GO Bond               False   \n",
       "5115                         17  Rev Bond               False   \n",
       "\n",
       "            no_build_travel_time  build_travel_time  time_savings  \\\n",
       "experiment                                                          \n",
       "5111                  102.833065          62.688732     36.266819   \n",
       "5112                   83.908347          68.641033     15.972747   \n",
       "5113                  100.006295          63.168795     71.082783   \n",
       "5114                  102.751368          66.356726     25.107086   \n",
       "5115                   80.856905          61.320195     19.363125   \n",
       "\n",
       "            value_of_time_savings  net_benefits  cost_of_capacity_expansion  \\\n",
       "experiment                                                                    \n",
       "5111                   284.723737   -196.031826                  271.032897   \n",
       "5112                    38.907614   -191.635603                  186.536127   \n",
       "5113                   129.102795   -369.047388                  593.526354   \n",
       "5114                   450.797033    -17.574178                  280.306588   \n",
       "5115                    73.777238   -514.200181                  727.206229   \n",
       "\n",
       "            present_cost_expansion  \n",
       "experiment                          \n",
       "5111                   9838.355785  \n",
       "5112                   3544.451471  \n",
       "5113                   8842.437317  \n",
       "5114                   7846.375512  \n",
       "5115                   8643.653243  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "design2_results = mm.run_experiments(design2)\n",
    "design2_results.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<emat.MetaModel 13 inputs -> 7 outputs>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mm.function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "########"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "        \n",
    "from emat.experiment.experimental_design import minimum_weighted_distance, batch_pick_new_experiments\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_augmentations = 10\n",
    "batch_size = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "aug_design = {}\n",
    "aug_results = {}\n",
    "design_names = ['lhs',]\n",
    "aug_mm = {-1: mm}\n",
    "aug_cv = {-1: mm.function.cross_val_scores()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[01:03.13] MainProcess/INFO: Selecting 1636\n",
      "[01:03.21] MainProcess/INFO: Selecting 33\n",
      "[01:03.29] MainProcess/INFO: Selecting 2568\n",
      "[01:03.37] MainProcess/INFO: Selecting 3733\n",
      "[01:03.44] MainProcess/INFO: Selecting 1096\n",
      "[01:03.53] MainProcess/INFO: Selecting 3364\n",
      "[01:03.60] MainProcess/INFO: Selecting 4327\n",
      "[01:03.69] MainProcess/INFO: Selecting 1377\n",
      "[01:03.77] MainProcess/INFO: Selecting 3779\n",
      "[01:03.85] MainProcess/INFO: Selecting 2211\n",
      "[01:04.64] MainProcess/INFO: 0 Fedorov Exchanges completed.\n",
      "[01:04.66] MainProcess/INFO: performing 10 scenarios/policies * 1 model(s) = 10 experiments\n",
      "[01:04.67] MainProcess/INFO: performing experiments sequentially\n",
      "[01:04.67] MainProcess/INFO: 1 cases completed\n",
      "[01:04.67] MainProcess/INFO: 2 cases completed\n",
      "[01:04.68] MainProcess/INFO: 3 cases completed\n",
      "[01:04.68] MainProcess/INFO: 4 cases completed\n",
      "[01:04.68] MainProcess/INFO: 5 cases completed\n",
      "[01:04.68] MainProcess/INFO: 6 cases completed\n",
      "[01:04.68] MainProcess/INFO: 7 cases completed\n",
      "[01:04.68] MainProcess/INFO: 8 cases completed\n",
      "[01:04.68] MainProcess/INFO: 9 cases completed\n",
      "[01:04.68] MainProcess/INFO: 10 cases completed\n",
      "[01:04.68] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no_build_travel_time          0.992884\n",
      "build_travel_time             0.970291\n",
      "time_savings                  0.874476\n",
      "value_of_time_savings         0.874107\n",
      "net_benefits                  0.784341\n",
      "cost_of_capacity_expansion    0.901594\n",
      "present_cost_expansion        0.941528\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[02:05.99] MainProcess/INFO: Selecting 3191\n",
      "[02:06.08] MainProcess/INFO: Selecting 1814\n",
      "[02:06.15] MainProcess/INFO: Selecting 4738\n",
      "[02:06.23] MainProcess/INFO: Selecting 4065\n",
      "[02:06.31] MainProcess/INFO: Selecting 713\n",
      "[02:06.39] MainProcess/INFO: Selecting 3601\n",
      "[02:06.47] MainProcess/INFO: Selecting 1067\n",
      "[02:06.55] MainProcess/INFO: Selecting 1026\n",
      "[02:06.64] MainProcess/INFO: Selecting 4458\n",
      "[02:06.72] MainProcess/INFO: Selecting 3245\n",
      "[02:07.54] MainProcess/INFO: 0 Fedorov Exchanges completed.\n",
      "[02:07.56] MainProcess/INFO: performing 10 scenarios/policies * 1 model(s) = 10 experiments\n",
      "[02:07.57] MainProcess/INFO: performing experiments sequentially\n",
      "[02:07.57] MainProcess/INFO: 1 cases completed\n",
      "[02:07.57] MainProcess/INFO: 2 cases completed\n",
      "[02:07.57] MainProcess/INFO: 3 cases completed\n",
      "[02:07.57] MainProcess/INFO: 4 cases completed\n",
      "[02:07.58] MainProcess/INFO: 5 cases completed\n",
      "[02:07.58] MainProcess/INFO: 6 cases completed\n",
      "[02:07.58] MainProcess/INFO: 7 cases completed\n",
      "[02:07.58] MainProcess/INFO: 8 cases completed\n",
      "[02:07.58] MainProcess/INFO: 9 cases completed\n",
      "[02:07.58] MainProcess/INFO: 10 cases completed\n",
      "[02:07.58] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no_build_travel_time          0.994168\n",
      "build_travel_time             0.961322\n",
      "time_savings                  0.940159\n",
      "value_of_time_savings         0.853358\n",
      "net_benefits                  0.750497\n",
      "cost_of_capacity_expansion    0.943484\n",
      "present_cost_expansion        0.925050\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[03:21.84] MainProcess/INFO: Selecting 625\n",
      "[03:21.93] MainProcess/INFO: Selecting 2450\n",
      "[03:22.01] MainProcess/INFO: Selecting 339\n",
      "[03:22.09] MainProcess/INFO: Selecting 903\n",
      "[03:22.18] MainProcess/INFO: Selecting 3445\n",
      "[03:22.27] MainProcess/INFO: Selecting 1540\n",
      "[03:22.35] MainProcess/INFO: Selecting 272\n",
      "[03:22.44] MainProcess/INFO: Selecting 2827\n",
      "[03:22.52] MainProcess/INFO: Selecting 158\n",
      "[03:22.61] MainProcess/INFO: Selecting 2960\n",
      "[03:22.75] MainProcess/INFO: Replacing 625 with 4313\n",
      "[03:23.25] MainProcess/INFO: Replacing 272 with 661\n",
      "[03:23.34] MainProcess/INFO: Replacing 2827 with 272\n",
      "[03:23.43] MainProcess/INFO: Replacing 158 with 2827\n",
      "[03:23.51] MainProcess/INFO: Replacing 2960 with 158\n",
      "[03:23.51] MainProcess/INFO: 5 Fedorov Exchanges completed.\n",
      "[03:24.37] MainProcess/INFO: 0 Fedorov Exchanges completed.\n",
      "[03:24.38] MainProcess/INFO: performing 10 scenarios/policies * 1 model(s) = 10 experiments\n",
      "[03:24.40] MainProcess/INFO: performing experiments sequentially\n",
      "[03:24.40] MainProcess/INFO: 1 cases completed\n",
      "[03:24.40] MainProcess/INFO: 2 cases completed\n",
      "[03:24.40] MainProcess/INFO: 3 cases completed\n",
      "[03:24.41] MainProcess/INFO: 4 cases completed\n",
      "[03:24.41] MainProcess/INFO: 5 cases completed\n",
      "[03:24.41] MainProcess/INFO: 6 cases completed\n",
      "[03:24.41] MainProcess/INFO: 7 cases completed\n",
      "[03:24.41] MainProcess/INFO: 8 cases completed\n",
      "[03:24.41] MainProcess/INFO: 9 cases completed\n",
      "[03:24.41] MainProcess/INFO: 10 cases completed\n",
      "[03:24.41] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no_build_travel_time          0.995746\n",
      "build_travel_time             0.986188\n",
      "time_savings                  0.916574\n",
      "value_of_time_savings         0.865989\n",
      "net_benefits                  0.805475\n",
      "cost_of_capacity_expansion    0.907720\n",
      "present_cost_expansion        0.939103\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[04:53.36] MainProcess/INFO: Selecting 4082\n",
      "[04:53.45] MainProcess/INFO: Selecting 3605\n",
      "[04:53.53] MainProcess/INFO: Selecting 3636\n",
      "[04:53.62] MainProcess/INFO: Selecting 3186\n",
      "[04:53.71] MainProcess/INFO: Selecting 3858\n",
      "[04:53.80] MainProcess/INFO: Selecting 335\n",
      "[04:53.89] MainProcess/INFO: Selecting 3036\n",
      "[04:53.97] MainProcess/INFO: Selecting 106\n",
      "[04:54.06] MainProcess/INFO: Selecting 2195\n",
      "[04:54.15] MainProcess/INFO: Selecting 1934\n",
      "[04:55.02] MainProcess/INFO: 0 Fedorov Exchanges completed.\n",
      "[04:55.04] MainProcess/INFO: performing 10 scenarios/policies * 1 model(s) = 10 experiments\n",
      "[04:55.06] MainProcess/INFO: performing experiments sequentially\n",
      "[04:55.06] MainProcess/INFO: 1 cases completed\n",
      "[04:55.06] MainProcess/INFO: 2 cases completed\n",
      "[04:55.06] MainProcess/INFO: 3 cases completed\n",
      "[04:55.06] MainProcess/INFO: 4 cases completed\n",
      "[04:55.06] MainProcess/INFO: 5 cases completed\n",
      "[04:55.06] MainProcess/INFO: 6 cases completed\n",
      "[04:55.06] MainProcess/INFO: 7 cases completed\n",
      "[04:55.06] MainProcess/INFO: 8 cases completed\n",
      "[04:55.06] MainProcess/INFO: 9 cases completed\n",
      "[04:55.06] MainProcess/INFO: 10 cases completed\n",
      "[04:55.07] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no_build_travel_time          0.997134\n",
      "build_travel_time             0.982871\n",
      "time_savings                  0.929099\n",
      "value_of_time_savings         0.879232\n",
      "net_benefits                  0.803267\n",
      "cost_of_capacity_expansion    0.915997\n",
      "present_cost_expansion        0.945378\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[06:37.01] MainProcess/INFO: Selecting 1445\n",
      "[06:37.10] MainProcess/INFO: Selecting 4267\n",
      "[06:37.19] MainProcess/INFO: Selecting 827\n",
      "[06:37.27] MainProcess/INFO: Selecting 3717\n",
      "[06:37.36] MainProcess/INFO: Selecting 3629\n",
      "[06:37.45] MainProcess/INFO: Selecting 4945\n",
      "[06:37.54] MainProcess/INFO: Selecting 2789\n",
      "[06:37.63] MainProcess/INFO: Selecting 3557\n",
      "[06:37.71] MainProcess/INFO: Selecting 2427\n",
      "[06:37.80] MainProcess/INFO: Selecting 2680\n",
      "[06:38.67] MainProcess/INFO: 0 Fedorov Exchanges completed.\n",
      "[06:38.69] MainProcess/INFO: performing 10 scenarios/policies * 1 model(s) = 10 experiments\n",
      "[06:38.70] MainProcess/INFO: performing experiments sequentially\n",
      "[06:38.70] MainProcess/INFO: 1 cases completed\n",
      "[06:38.71] MainProcess/INFO: 2 cases completed\n",
      "[06:38.71] MainProcess/INFO: 3 cases completed\n",
      "[06:38.71] MainProcess/INFO: 4 cases completed\n",
      "[06:38.71] MainProcess/INFO: 5 cases completed\n",
      "[06:38.71] MainProcess/INFO: 6 cases completed\n",
      "[06:38.71] MainProcess/INFO: 7 cases completed\n",
      "[06:38.71] MainProcess/INFO: 8 cases completed\n",
      "[06:38.71] MainProcess/INFO: 9 cases completed\n",
      "[06:38.71] MainProcess/INFO: 10 cases completed\n",
      "[06:38.71] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no_build_travel_time          0.994190\n",
      "build_travel_time             0.985120\n",
      "time_savings                  0.942223\n",
      "value_of_time_savings         0.894755\n",
      "net_benefits                  0.817580\n",
      "cost_of_capacity_expansion    0.925033\n",
      "present_cost_expansion        0.943851\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[08:37.60] MainProcess/INFO: Selecting 499\n",
      "[08:37.69] MainProcess/INFO: Selecting 3320\n",
      "[08:37.78] MainProcess/INFO: Selecting 842\n",
      "[08:37.87] MainProcess/INFO: Selecting 512\n",
      "[08:37.96] MainProcess/INFO: Selecting 644\n",
      "[08:38.05] MainProcess/INFO: Selecting 1815\n",
      "[08:38.14] MainProcess/INFO: Selecting 34\n",
      "[08:38.24] MainProcess/INFO: Selecting 3714\n",
      "[08:38.32] MainProcess/INFO: Selecting 3948\n",
      "[08:38.42] MainProcess/INFO: Selecting 3410\n",
      "[08:39.33] MainProcess/INFO: 0 Fedorov Exchanges completed.\n",
      "[08:39.35] MainProcess/INFO: performing 10 scenarios/policies * 1 model(s) = 10 experiments\n",
      "[08:39.36] MainProcess/INFO: performing experiments sequentially\n",
      "[08:39.36] MainProcess/INFO: 1 cases completed\n",
      "[08:39.36] MainProcess/INFO: 2 cases completed\n",
      "[08:39.36] MainProcess/INFO: 3 cases completed\n",
      "[08:39.36] MainProcess/INFO: 4 cases completed\n",
      "[08:39.37] MainProcess/INFO: 5 cases completed\n",
      "[08:39.37] MainProcess/INFO: 6 cases completed\n",
      "[08:39.37] MainProcess/INFO: 7 cases completed\n",
      "[08:39.37] MainProcess/INFO: 8 cases completed\n",
      "[08:39.37] MainProcess/INFO: 9 cases completed\n",
      "[08:39.37] MainProcess/INFO: 10 cases completed\n",
      "[08:39.37] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no_build_travel_time          0.998775\n",
      "build_travel_time             0.984953\n",
      "time_savings                  0.953420\n",
      "value_of_time_savings         0.912350\n",
      "net_benefits                  0.782990\n",
      "cost_of_capacity_expansion    0.943472\n",
      "present_cost_expansion        0.976165\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[11:35.57] MainProcess/INFO: Selecting 1014\n",
      "[11:35.66] MainProcess/INFO: Selecting 950\n",
      "[11:35.75] MainProcess/INFO: Selecting 908\n",
      "[11:35.85] MainProcess/INFO: Selecting 4975\n",
      "[11:35.94] MainProcess/INFO: Selecting 3457\n",
      "[11:36.03] MainProcess/INFO: Selecting 174\n",
      "[11:36.12] MainProcess/INFO: Selecting 797\n",
      "[11:36.21] MainProcess/INFO: Selecting 3286\n",
      "[11:36.30] MainProcess/INFO: Selecting 3830\n",
      "[11:36.39] MainProcess/INFO: Selecting 4510\n",
      "[11:37.34] MainProcess/INFO: 0 Fedorov Exchanges completed.\n",
      "[11:37.36] MainProcess/INFO: performing 10 scenarios/policies * 1 model(s) = 10 experiments\n",
      "[11:37.37] MainProcess/INFO: performing experiments sequentially\n",
      "[11:37.37] MainProcess/INFO: 1 cases completed\n",
      "[11:37.38] MainProcess/INFO: 2 cases completed\n",
      "[11:37.38] MainProcess/INFO: 3 cases completed\n",
      "[11:37.38] MainProcess/INFO: 4 cases completed\n",
      "[11:37.38] MainProcess/INFO: 5 cases completed\n",
      "[11:37.38] MainProcess/INFO: 6 cases completed\n",
      "[11:37.38] MainProcess/INFO: 7 cases completed\n",
      "[11:37.38] MainProcess/INFO: 8 cases completed\n",
      "[11:37.38] MainProcess/INFO: 9 cases completed\n",
      "[11:37.38] MainProcess/INFO: 10 cases completed\n",
      "[11:37.38] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no_build_travel_time          0.995566\n",
      "build_travel_time             0.989221\n",
      "time_savings                  0.957067\n",
      "value_of_time_savings         0.924821\n",
      "net_benefits                  0.801601\n",
      "cost_of_capacity_expansion    0.953287\n",
      "present_cost_expansion        0.957326\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[15:09.61] MainProcess/INFO: Selecting 4177\n",
      "[15:09.70] MainProcess/INFO: Selecting 2889\n",
      "[15:09.79] MainProcess/INFO: Selecting 1281\n",
      "[15:09.89] MainProcess/INFO: Selecting 558\n",
      "[15:09.99] MainProcess/INFO: Selecting 4468\n",
      "[15:10.09] MainProcess/INFO: Selecting 4372\n",
      "[15:10.18] MainProcess/INFO: Selecting 1211\n",
      "[15:10.29] MainProcess/INFO: Selecting 454\n",
      "[15:10.39] MainProcess/INFO: Selecting 4614\n",
      "[15:10.48] MainProcess/INFO: Selecting 4983\n",
      "[15:10.62] MainProcess/INFO: Replacing 4177 with 3830\n",
      "[15:11.08] MainProcess/INFO: Replacing 4372 with 4647\n",
      "[15:11.17] MainProcess/INFO: Replacing 1211 with 4372\n",
      "[15:11.27] MainProcess/INFO: Replacing 454 with 1211\n",
      "[15:11.36] MainProcess/INFO: Replacing 4614 with 454\n",
      "[15:11.46] MainProcess/INFO: Replacing 4983 with 4614\n",
      "[15:11.46] MainProcess/INFO: 6 Fedorov Exchanges completed.\n",
      "[15:11.56] MainProcess/INFO: Replacing 3830 with 2604\n",
      "[15:12.02] MainProcess/INFO: Replacing 4647 with 2551\n",
      "[15:12.40] MainProcess/INFO: 2 Fedorov Exchanges completed.\n",
      "[15:13.32] MainProcess/INFO: 0 Fedorov Exchanges completed.\n",
      "[15:13.34] MainProcess/INFO: performing 10 scenarios/policies * 1 model(s) = 10 experiments\n",
      "[15:13.35] MainProcess/INFO: performing experiments sequentially\n",
      "[15:13.35] MainProcess/INFO: 1 cases completed\n",
      "[15:13.35] MainProcess/INFO: 2 cases completed\n",
      "[15:13.35] MainProcess/INFO: 3 cases completed\n",
      "[15:13.36] MainProcess/INFO: 4 cases completed\n",
      "[15:13.36] MainProcess/INFO: 5 cases completed\n",
      "[15:13.36] MainProcess/INFO: 6 cases completed\n",
      "[15:13.36] MainProcess/INFO: 7 cases completed\n",
      "[15:13.36] MainProcess/INFO: 8 cases completed\n",
      "[15:13.36] MainProcess/INFO: 9 cases completed\n",
      "[15:13.36] MainProcess/INFO: 10 cases completed\n",
      "[15:13.36] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no_build_travel_time          0.997592\n",
      "build_travel_time             0.993866\n",
      "time_savings                  0.955163\n",
      "value_of_time_savings         0.929244\n",
      "net_benefits                  0.796554\n",
      "cost_of_capacity_expansion    0.967811\n",
      "present_cost_expansion        0.972703\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[19:02.01] MainProcess/INFO: Selecting 1069\n",
      "[19:02.11] MainProcess/INFO: Selecting 679\n",
      "[19:02.20] MainProcess/INFO: Selecting 3895\n",
      "[19:02.29] MainProcess/INFO: Selecting 4495\n",
      "[19:02.38] MainProcess/INFO: Selecting 3981\n",
      "[19:02.47] MainProcess/INFO: Selecting 313\n",
      "[19:02.57] MainProcess/INFO: Selecting 4944\n",
      "[19:02.67] MainProcess/INFO: Selecting 636\n",
      "[19:02.76] MainProcess/INFO: Selecting 1075\n",
      "[19:02.85] MainProcess/INFO: Selecting 745\n",
      "[19:03.79] MainProcess/INFO: 0 Fedorov Exchanges completed.\n",
      "[19:03.81] MainProcess/INFO: performing 10 scenarios/policies * 1 model(s) = 10 experiments\n",
      "[19:03.82] MainProcess/INFO: performing experiments sequentially\n",
      "[19:03.83] MainProcess/INFO: 1 cases completed\n",
      "[19:03.83] MainProcess/INFO: 2 cases completed\n",
      "[19:03.83] MainProcess/INFO: 3 cases completed\n",
      "[19:03.83] MainProcess/INFO: 4 cases completed\n",
      "[19:03.83] MainProcess/INFO: 5 cases completed\n",
      "[19:03.83] MainProcess/INFO: 6 cases completed\n",
      "[19:03.83] MainProcess/INFO: 7 cases completed\n",
      "[19:03.83] MainProcess/INFO: 8 cases completed\n",
      "[19:03.84] MainProcess/INFO: 9 cases completed\n",
      "[19:03.84] MainProcess/INFO: 10 cases completed\n",
      "[19:03.84] MainProcess/INFO: experiments finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no_build_travel_time          0.998373\n",
      "build_travel_time             0.990425\n",
      "time_savings                  0.950541\n",
      "value_of_time_savings         0.920313\n",
      "net_benefits                  0.836763\n",
      "cost_of_capacity_expansion    0.976637\n",
      "present_cost_expansion        0.968634\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[23:36.32] MainProcess/INFO: Selecting 1451\n",
      "[23:36.41] MainProcess/INFO: Selecting 209\n",
      "[23:36.51] MainProcess/INFO: Selecting 96\n",
      "[23:36.60] MainProcess/INFO: Selecting 4264\n",
      "[23:36.70] MainProcess/INFO: Selecting 4096\n",
      "[23:36.80] MainProcess/INFO: Selecting 2376\n",
      "[23:36.89] MainProcess/INFO: Selecting 3072\n",
      "[23:36.99] MainProcess/INFO: Selecting 2593\n",
      "[23:37.08] MainProcess/INFO: Selecting 1258\n",
      "[23:37.18] MainProcess/INFO: Selecting 1881\n",
      "[23:38.14] MainProcess/INFO: 0 Fedorov Exchanges completed.\n",
      "[23:38.16] MainProcess/INFO: performing 10 scenarios/policies * 1 model(s) = 10 experiments\n",
      "[23:38.17] MainProcess/INFO: performing experiments sequentially\n",
      "[23:38.17] MainProcess/INFO: 1 cases completed\n",
      "[23:38.17] MainProcess/INFO: 2 cases completed\n",
      "[23:38.17] MainProcess/INFO: 3 cases completed\n",
      "[23:38.17] MainProcess/INFO: 4 cases completed\n",
      "[23:38.17] MainProcess/INFO: 5 cases completed\n",
      "[23:38.18] MainProcess/INFO: 6 cases completed\n",
      "[23:38.18] MainProcess/INFO: 7 cases completed\n",
      "[23:38.18] MainProcess/INFO: 8 cases completed\n",
      "[23:38.18] MainProcess/INFO: 9 cases completed\n",
      "[23:38.18] MainProcess/INFO: 10 cases completed\n",
      "[23:38.18] MainProcess/INFO: experiments finished\n"
     ]
    }
   ],
   "source": [
    "for aug in range(n_augmentations):\n",
    "    design_pool = design_experiments(road_scope, n_samples=5000, sampler='ulhs98', random_seed=42+aug)\n",
    "    aug_design[aug] = aug_mm[aug-1].function.pick_new_experiments(\n",
    "            design_pool,\n",
    "            batch_size=batch_size,\n",
    "            output_focus=dict(1-aug_cv[aug-1]),\n",
    "            scope=road_scope,\n",
    "            db=emat_db,\n",
    "            design_name=f'aug_{aug}',\n",
    "    )\n",
    "    with SequentialEvaluator(m) as eval_seq:\n",
    "        aug_results[aug] = m.run_experiments(design_name=f'aug_{aug}', evaluator=eval_seq)\n",
    "    design_names.append(f'aug_{aug}')\n",
    "    aug_mm[aug] = m.create_metamodel_from_designs(design_names)\n",
    "    aug_cv[aug] = aug_mm[aug].function.cross_val_scores()\n",
    "    print(aug_cv[aug])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# with SequentialEvaluator(m) as eval_seq:\n",
    "#     aug1_results = m.run_experiments(design_name='augment', evaluator=eval_seq)\n",
    "# aug1_results.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mm.function.cross_val_scores()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mm1 = m.create_metamodel_from_designs(['lhs', 'augment'])\n",
    "# mm1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mm1.function.cross_val_scores()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "raise RuntimeError"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "design4_pool = design_experiments(road_scope, n_samples=5000, sampler='lhs', random_seed=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "design4 = mm.function.pick_new_experiments(\n",
    "            design4_pool,\n",
    "            batch_size=50,\n",
    "            output_focus={'net_benefits':0.6, 'value_of_time_savings':0.4},\n",
    "            scope=road_scope,\n",
    "            db=emat_db,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with SequentialEvaluator(m) as eval_seq:\n",
    "    aug2_results = m.run_experiments(design_name='augment_2', evaluator=eval_seq)\n",
    "aug2_results.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm2 = m.create_metamodel_from_designs(['lhs', 'augment', 'augment_2'])\n",
    "mm2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mm2.function.cross_val_scores()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "raise Run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lhs_results[['interest_rate', 'net_benefits', 'cost_of_capacity_expansion', 'present_cost_expansion', 'time_savings']].corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lhs_results[['alpha', 'net_benefits']].corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compare Core vs Meta Model Results\n",
    "\n",
    "We can generate a variety of plots to compare the distribution of meta-model outcomes\n",
    "on the new design against the original model's results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Show(scatter_graph(\n",
    "    X=[ design2_results['input_flow'],\n",
    "        lhs_results['input_flow'] ],\n",
    "    Y=[ design2_results['time_savings'],\n",
    "        lhs_results['time_savings'],  ],\n",
    "    legend_labels=[ 'meta-model',\n",
    "                    'core model',  ]\n",
    "))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "Show(scatter_graph(\n",
    "    X=[ design2_results['no_build_travel_time'],\n",
    "        lhs_results['no_build_travel_time'], ],\n",
    "    Y=[ design2_results['time_savings'],\n",
    "        lhs_results['time_savings'], ],\n",
    "    legend_labels=[ 'meta-model',\n",
    "                    'core model', ]\n",
    "))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Show(scatter_graph(\n",
    "    X=[ design2_results['expand_capacity'],\n",
    "        lhs_results['expand_capacity'], ],\n",
    "    Y=[ design2_results['present_cost_expansion'],\n",
    "        lhs_results['present_cost_expansion'], ],\n",
    "    legend_labels=[ 'meta-model',\n",
    "                    'core model', ]\n",
    "))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:EMAT]",
   "language": "python",
   "name": "conda-env-EMAT-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
