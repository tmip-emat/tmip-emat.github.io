{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import emat\n",
    "emat.versions()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Scoring\n",
    "\n",
    "Feature scoring is a methodology for identifying what model inputs (in machine \n",
    "learning terminology, “features”) have the greatest relationship to the outputs.  \n",
    "The relationship is not necessarily linear, but rather can be any arbitrary \n",
    "linear or non-linear relationship.  For example, consider the function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy\n",
    "\n",
    "def demo(A=0,B=0,C=0):\n",
    "    \"\"\"\n",
    "    Y = A/2 + sin(6πB) + ε\n",
    "    \"\"\"\n",
    "    return {'Y':A/2 + numpy.sin(6 * numpy.pi * B) + 0.1 * numpy.random.random()}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can readily tell from the functional form that the *B* term is the\n",
    "most significant when all parameter vary in the unit interval, as the \n",
    "amplitude of the sine wave attached to *B* is 1 (although the relationship \n",
    "is clearly non-linear) while the maximum change\n",
    "in the linear component attached to *A* is only one half, and the output\n",
    "is totally unresponsive to *C*.\n",
    "\n",
    "To demonstrate the feature scoring, we can define a scope to explore this \n",
    "demo model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "demo_scope = emat.Scope(scope_file='', scope_def=\"\"\"---\n",
    "scope:\n",
    "    name: demo\n",
    "inputs:\n",
    "    A:\n",
    "        ptype: exogenous uncertainty\n",
    "        dtype: float\n",
    "        min: 0\n",
    "        max: 1\n",
    "    B:\n",
    "        ptype: exogenous uncertainty\n",
    "        dtype: float\n",
    "        min: 0\n",
    "        max: 1\n",
    "    C:\n",
    "        ptype: exogenous uncertainty\n",
    "        dtype: float\n",
    "        min: 0\n",
    "        max: 1\n",
    "outputs:\n",
    "    Y:  \n",
    "        kind: info\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And then we will design and run some experiments to generate data used for\n",
    "feature scoring."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat import PythonCoreModel\n",
    "demo_model = PythonCoreModel(demo, scope=demo_scope)\n",
    "experiments = demo_model.design_experiments(n_samples=5000)\n",
    "experiment_results = demo_model.run_experiments(experiments)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `feature_scores` method from the `emat.analysis` subpackage allows for\n",
    "feature scoring based on the implementation found in the EMA Workbench."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.analysis import feature_scores\n",
    "fs = feature_scores(demo_scope, experiment_results, return_type='dataframe')\n",
    "fs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the `feature_scores` depend on the *scope* (to identify what are input features\n",
    "and what are outputs) and the *experiment_results*, but not on the model itself.  \n",
    "\n",
    "We can plot each of these input parameters using the `display_experiments` method,\n",
    "which can help visualize the underlying data and exactly how *B* is the most important\n",
    "feature for this example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.analysis import display_experiments\n",
    "fig = display_experiments(demo_scope, experiment_results, render=False, return_figures=True)['Y']\n",
    "fig.update_layout(\n",
    "    xaxis_title_text =f\"A (Feature Score = {fs.loc['Y','A']:.3f})\",\n",
    "    xaxis2_title_text=f\"B (Feature Score = {fs.loc['Y','B']:.3f})\",\n",
    "    xaxis3_title_text=f\"C (Feature Score = {fs.loc['Y','C']:.3f})\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One important thing to consider is that changing the range of the input parameters \n",
    "in the scope can significantly impact the feature scores, even if the underlying \n",
    "model itself is not changed.  For example, consider what happens to the features\n",
    "scores when we expand the range of the uncertainties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "demo_model.scope = emat.Scope(scope_file='', scope_def=\"\"\"---\n",
    "scope:\n",
    "    name: demo\n",
    "inputs:\n",
    "    A:\n",
    "        ptype: exogenous uncertainty\n",
    "        dtype: float\n",
    "        min: 0\n",
    "        max: 5\n",
    "    B:\n",
    "        ptype: exogenous uncertainty\n",
    "        dtype: float\n",
    "        min: 0\n",
    "        max: 5\n",
    "    C:\n",
    "        ptype: exogenous uncertainty\n",
    "        dtype: float\n",
    "        min: 0\n",
    "        max: 5\n",
    "outputs:\n",
    "    Y:  \n",
    "        kind: info\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "wider_experiments = demo_model.design_experiments(n_samples=5000)\n",
    "wider_results = demo_model.run_experiments(wider_experiments)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.analysis import feature_scores\n",
    "wider_fs = feature_scores(demo_model.scope, wider_results, return_type='dataframe')\n",
    "wider_fs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = display_experiments(demo_model.scope, wider_results, render=False, return_figures=True)['Y']\n",
    "fig.update_layout(\n",
    "    xaxis_title_text =f\"A (Feature Score = {wider_fs.loc['Y','A']:.3f})\",\n",
    "    xaxis2_title_text=f\"B (Feature Score = {wider_fs.loc['Y','B']:.3f})\",\n",
    "    xaxis3_title_text=f\"C (Feature Score = {wider_fs.loc['Y','C']:.3f})\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The pattern has shifted, with the sine wave in *B* looking much more like the random noise,\n",
    "while the linear trend in *A* is now much more important in predicting the output, and\n",
    "the feature scores also shift to reflect this change."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Road Test Feature Scores\n",
    "\n",
    "We can apply the feature scoring methodology to the Road Test example \n",
    "in a similar fashion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from emat.model.core_python import Road_Capacity_Investment\n",
    "\n",
    "road_scope = emat.Scope(emat.package_file('model','tests','road_test.yaml'))\n",
    "road_test = PythonCoreModel(Road_Capacity_Investment, scope=road_scope)\n",
    "road_test_design = road_test.design_experiments(n_samples=5000, sampler='lhs')\n",
    "road_test_results = road_test.run_experiments(design=road_test_design)\n",
    "feature_scores(road_scope, road_test_results)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The colors on the returned DataFrame highlight the most important input features\n",
    "for each performance measure."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,py:percent"
  },
  "kernelspec": {
   "display_name": "EMAT",
   "language": "python",
   "name": "emat"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
